{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Avaza API Documentation",
    "description": "Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>"
  },
  "host": "api.avaza.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Account Details",
        "operationId": "Account_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_account"
            ]
          }
        ]
      }
    },
    "/api/Company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets list of Companies",
        "operationId": "Company_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "1 based page number to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompanyList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update a Task.",
        "description": "Requires TaskID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.",
        "operationId": "Company_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompany"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a Company",
        "operationId": "Company_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewCompany"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      }
    },
    "/api/Company/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets Company by Company ID",
        "operationId": "Company_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID Number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      }
    },
    "/api/Contact": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Gets list of Contacts",
        "operationId": "Contact_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Contact",
        "operationId": "Contact_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewCompanyContact"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompanyContact"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_contacts"
            ]
          }
        ]
      }
    },
    "/api/Contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Gets Contact by Contact ID",
        "operationId": "Contact_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompanyContact"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_contacts"
            ]
          }
        ]
      }
    },
    "/api/CreditNote": {
      "get": {
        "tags": [
          "CreditNote"
        ],
        "summary": "Gets list of CreditNotes",
        "operationId": "CreditNote_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditNoteList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/CreditNote/{id}": {
      "get": {
        "tags": [
          "CreditNote"
        ],
        "summary": "Gets Credit Note by CreditNoteID",
        "operationId": "CreditNote_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Credit Note ID Number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditNote"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Gets list of Currencies",
        "operationId": "Currency_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CurrencyList"
            }
          }
        }
      }
    },
    "/api/Estimate": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Gets list of Estimates",
        "description": "EstimateStatusCode values are: \"Draft\", \"Sent\", \"Late\", \"Paid\", \"Partial\", \"Void\"",
        "operationId": "Estimate_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EstimateList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Estimate/{id}": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Gets Estimate by Estimate ID",
        "operationId": "Estimate_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Estimate Estimate ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Expense": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Gets list of Expenses",
        "operationId": "Expense_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ExpenseDateFrom",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ExpenseDateTo",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "UserEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CategoryName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CustomerID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ProjectID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isChargeable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInvoiced",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExpenseList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Expense"
        ],
        "summary": "Create an Expense",
        "description": "Create an Expense",
        "operationId": "Expense_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExpenseDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_expenses"
            ]
          }
        ]
      }
    },
    "/api/Expense/{id}": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Gets an Expense Entry by Expense ID",
        "operationId": "Expense_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Expense ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExpenseDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_expenses"
            ]
          }
        ]
      }
    },
    "/api/Inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Gets list of Inventory",
        "description": "",
        "operationId": "Inventory_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Inventory/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Gets InventoryItem by InventoryItem ID",
        "operationId": "Inventory_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "InventoryItem ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets list of Invoices",
        "description": "TransactionStatusCode values are: \"Draft\", \"Sent\", \"Late\", \"Paid\", \"Partial\", \"Void\"",
        "operationId": "Invoice_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvoiceList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Create a new draft invoice",
        "operationId": "Invoice_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewInvoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_financials"
            ]
          }
        ]
      }
    },
    "/api/Invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets Invoice by Invoice ID",
        "operationId": "Invoice_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Transaction ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets list of Payments",
        "operationId": "Payment_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create new Payment and optionally assign payment allocations to Invoices",
        "operationId": "Payment_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewPayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_financials"
            ]
          }
        ]
      }
    },
    "/api/Payment/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets Payment by Payment Transaction ID",
        "operationId": "Payment_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Transaction ID Number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Gets list of Projects",
        "operationId": "Project_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Only show project records updated after a certain date (UTC)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "A column to sort on. Current possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "TimesheetUserID",
            "in": "query",
            "description": "Filter to the projects that the supplied UserID can add timesheets to",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Include Archived Projects in the results",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a Project",
        "operationId": "Project_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewProjectModel"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Gets Project by Project ID",
        "operationId": "Project_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/ProjectTimesheetCategory": {
      "get": {
        "tags": [
          "ProjectTimesheetCategory"
        ],
        "summary": "Gets list of Project Timesheet Categories",
        "operationId": "ProjectTimesheetCategory_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Get categories filtered by ProjectID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProjectTimesheetCategoryList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      }
    },
    "/api/ScheduleAssignment": {
      "get": {
        "tags": [
          "ScheduleAssignment"
        ],
        "summary": "Gets list of Schedule Assignments.",
        "description": "Schedule assignments are per-day, and link to a parent Schedule Series.",
        "operationId": "ScheduleAssignment_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Limit results to records updated after the specified date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleDateFrom",
            "in": "query",
            "description": "Filter for schedule assignement  that are  on or after a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleDateTo",
            "in": "query",
            "description": "Filter for schedules that are on or before a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleSeriesID",
            "in": "query",
            "description": "Filter to records for a particular Schedule Series",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "UserEmail",
            "in": "query",
            "description": "The email of the user who has been scheduled",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScheduleAssignmentList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_schedule"
            ]
          }
        ]
      }
    },
    "/api/ScheduleSeries": {
      "get": {
        "tags": [
          "ScheduleSeries"
        ],
        "summary": "Gets list of Schedule Series",
        "description": "Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.",
        "operationId": "ScheduleSeries_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Limit results to records updated after the specified date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleStartDateFrom",
            "in": "query",
            "description": "Filter for schedules that start on or after a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleStartDateTo",
            "in": "query",
            "description": "Filter for schedules that start on or before a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleEndDateFrom",
            "in": "query",
            "description": "Filter for schedules that end on or after a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ScheduleEndDateTo",
            "in": "query",
            "description": "Filter for schedules that end on or before a specific date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "UserEmail",
            "in": "query",
            "description": "The email of the user who has been scheduled",
            "required": false,
            "type": "string"
          },
          {
            "name": "TimeSheetCategoryID",
            "in": "query",
            "description": "Filter for schedule records linked to a specific timesheeet category",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "TimeSheetCategoryName",
            "in": "query",
            "description": "Filter for schedule records with a specific timesheeet category name (exact string match)",
            "required": false,
            "type": "string"
          },
          {
            "name": "LeaveTypeID",
            "in": "query",
            "description": "Filter to records of a particular leave type",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Filter to only include books linked to a specific project",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "CompanyID",
            "in": "query",
            "description": "Filter to only include records linked to projects, where that project belongs to a specific customer company",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScheduleSeriesList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_schedule"
            ]
          }
        ]
      }
    },
    "/api/Section": {
      "get": {
        "tags": [
          "Section"
        ],
        "summary": "Gets list of Sections",
        "operationId": "Section_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Get sections for Project with ProjectID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SectionList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Section"
        ],
        "summary": "Create a Section",
        "operationId": "Section_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewSection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SectionDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets list of Tasks",
        "operationId": "Task_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "description": "Optional filter to records updated after a specific date.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page. Defaults to 20.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1. Defaults to 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "ProjectID",
            "in": "query",
            "description": "Optional filter to only display tasks belonging to a specific ProjectID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update a Task.",
        "description": "Requires TaskID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.",
        "operationId": "Task_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a Task",
        "operationId": "Task_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_projects"
            ]
          }
        ]
      }
    },
    "/api/Task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets Task by Task ID",
        "operationId": "Task_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TaskDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_projects"
            ]
          }
        ]
      }
    },
    "/api/Tax": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Get List of Taxes configured in the Avaza account.",
        "operationId": "Tax_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaxList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_financials"
            ]
          }
        ]
      }
    },
    "/api/Timesheet": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Gets list of Timsheets",
        "operationId": "Timesheet_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UpdatedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "EntryDateFrom",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "EntryDateTo",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "UserEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CategoryName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ProjectID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isBillable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInvoiced",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isTimerRunning",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page to display. Starts from 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\",\"EntryDate\", \"EntryDate desc\", \"StartTimeLocal\",\"StartTimeLocal desc\", \"TimeSheetEntryID\", \"TimeSheetEntryID desc\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimesheetList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Update a Timesheet",
        "description": "The FieldsToUpdate field expects a string array collection of the field names you would like updated.",
        "operationId": "Timesheet_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTimesheetModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimesheetDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Create a new Timesheet Entry",
        "operationId": "Timesheet_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTimesheet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimesheetDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/Timesheet/{id}": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Gets a Timesheet Entry by Timesheet ID",
        "operationId": "Timesheet_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID number",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TimesheetDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Delete a Timesheet Entry",
        "operationId": "Timesheet_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The TimesheetEntryID of the Timesheet Entry",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetSubmission": {
      "post": {
        "tags": [
          "TimesheetSubmission"
        ],
        "summary": "Submit Timesheets for Approval.",
        "description": "Either provide a a specific Day (WholeDayOf) or any day in a Week (WholeWeekOf) to submit all draft timesheets in that day or week",
        "operationId": "TimesheetSubmission_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "SendNotifications",
            "in": "query",
            "description": "Send email alerts to timesheet approvers. Defaults to true",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "WholeWeekOf",
            "in": "query",
            "description": "A date (yyyy-MM-dd) that falls within  a Week to have all timesheets in that week submitted. Respects the First Day of Week setting in your account Timesheet Settings to determine the week range.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "WholeDayOf",
            "in": "query",
            "description": "A date (yyyy-MM-dd) to submit all timesheets on this day",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "The user to submit timesheets for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetTimer": {
      "get": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Gets the  Running Timer if there is one for a user.",
        "operationId": "TimesheetTimer_GetRunningTimer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_timesheets"
            ]
          }
        ]
      }
    },
    "/api/TimesheetTimer/{id}": {
      "post": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Starts a Timer running on an existing Timesheet Entry",
        "operationId": "TimesheetTimer_StartTimer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the existing timesheet entry on which to start a timer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "TimesheetTimer"
        ],
        "summary": "Stop the timer running on an existing Timesheet Entry",
        "operationId": "TimesheetTimer_StopTimer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the existing timesheet entry that needs its timer stopped",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UserID",
            "in": "query",
            "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write_timesheets"
            ]
          }
        ]
      }
    },
    "/api/UserProfile": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Get Collection of Users who have roles in the current Avaza account.",
        "description": "Admin and Invoice Managers can see all. Other users are limited to seeing their own profile.",
        "operationId": "UserProfile_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Roles",
            "in": "query",
            "description": "Optional list of comma separated role codes to filter users by (e.g. \"TimesheetUser,Admin\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "Tags",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "CurrentUserOnly",
            "in": "query",
            "description": "Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "CompanyIDFK",
            "in": "query",
            "description": "Optionally filter by Company ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read_users"
            ]
          }
        ]
      }
    },
    "/api/Webhook": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get list of Webhook Subscriptions",
        "operationId": "Webhook_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Subscribe to Webhook. On success, returns ID of webhook subscription.",
        "description": "When you receive a webhook, you should respond with Http 200 OK Status Code, otherwise we will retry. To create a webhook, you need both the webhook_notifications scope, as well as the scope for the required entity being monitored.  Event values are: \"company_created\", \"company_deleted\", \"company_updated\", \"contact_created\", \"contact_deleted\", \"contact_updated\", \"invoice_created\", \"invoice_sent\", \"project_created\", \"project_deleted\", \"project_updated\", \"task_created\", \"task_updated\", \"timesheet_created\", \"timesheet_deleted\", \"timesheet_updated\".  You can subscribe to any webhook, but you will only receive notifications for data appropriate to the roles of your user account. There is an optional  Secret parameter (string 255 char max). This allows for webhook authentication. If provided, the Secret will be BASE 64 encoded and passed with notications as a basic authentication http header. i.e. Authorization Basic [BASE64 of Secret]\"",
        "operationId": "Webhook_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscription"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/SubscribeResult"
            }
          },
          "409": {
            "description": "Duplicate subscription already exists"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications",
              "read_contacts",
              "read_account",
              "read_users",
              "read_financials",
              "read_projects",
              "read_schedule",
              "read_timesheets",
              "read_expenses",
              "write_contacts",
              "write_account",
              "write_users",
              "write_financials",
              "write_projects",
              "write_schedule",
              "write_timesheets",
              "write_expenses"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete webhook subscription by URL",
        "operationId": "Webhook_DeleteByUrl",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "target_url",
            "in": "query",
            "description": "Target URL that should be used to delete subscriptions",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Subscription Deleted OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      }
    },
    "/api/Webhook/{id}": {
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete Webhook Subscription by ID",
        "operationId": "Webhook_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "Subscription deleted ok",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_notifications"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountDetails": {
      "type": "object",
      "properties": {
        "AccountID": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "Subdomain": {
          "type": "string"
        },
        "hasStartEndTimesheets": {
          "type": "boolean"
        },
        "has24HourTimesheetFormat": {
          "type": "boolean"
        },
        "WeeklyTimesheetReminder": {
          "type": "boolean"
        },
        "LockApprovedTimesheets": {
          "type": "boolean"
        },
        "TimesheetDayOfWeek": {
          "format": "int32",
          "type": "integer"
        },
        "TimesheetDisplayFormatCode": {
          "type": "string"
        },
        "AllowHidingCompletedTasksOnTimesheet": {
          "type": "boolean"
        },
        "CurrentServerTimeISO": {
          "description": "Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"",
          "type": "string"
        }
      }
    },
    "CompanyList": {
      "type": "object",
      "properties": {
        "Companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "CompanyID": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "BillingAddressLine": {
          "type": "string"
        },
        "BillingAddressCity": {
          "type": "string"
        },
        "BillingAddressState": {
          "type": "string"
        },
        "BillingAddressPostCode": {
          "type": "string"
        },
        "BillingCountryCode": {
          "type": "string"
        },
        "BillingAddress": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Fax": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "TaxNumber": {
          "type": "string"
        },
        "Comments": {
          "type": "string"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "DefaultTradingTermIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "Contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyContact"
          }
        }
      }
    },
    "CompanyContact": {
      "type": "object",
      "properties": {
        "ContactID": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "PositionTitle": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NewCompany": {
      "required": [
        "CompanyName"
      ],
      "type": "object",
      "properties": {
        "CompanyName": {
          "type": "string"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "BillingAddressLine": {
          "type": "string"
        },
        "BillingAddressCity": {
          "type": "string"
        },
        "BillingAddressState": {
          "type": "string"
        },
        "BillingAddressPostCode": {
          "type": "string"
        },
        "BillingCountryCode": {
          "type": "string"
        },
        "BillingAddress": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Fax": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "TaxNumber": {
          "type": "string"
        },
        "Comments": {
          "type": "string"
        }
      }
    },
    "UpdateCompany": {
      "type": "object",
      "properties": {
        "CompanyID": {
          "format": "int32",
          "type": "integer"
        },
        "FieldsToUpdate": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CompanyName": {
          "type": "string"
        },
        "BillingAddressLine": {
          "type": "string"
        },
        "BillingAddressCity": {
          "type": "string"
        },
        "BillingAddressState": {
          "type": "string"
        },
        "BillingAddressPostCode": {
          "type": "string"
        },
        "BillingCountryCode": {
          "type": "string"
        },
        "BillingAddress": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Fax": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "TaxNumber": {
          "type": "string"
        },
        "Comments": {
          "type": "string"
        }
      }
    },
    "ContactList": {
      "type": "object",
      "properties": {
        "Contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyContact"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NewCompanyContact": {
      "required": [
        "ContactEmail",
        "Firstname",
        "Lastname"
      ],
      "type": "object",
      "properties": {
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "CompanyBillingAddress": {
          "type": "string"
        },
        "CompanyBillingAddressLine": {
          "type": "string"
        },
        "CompanyBillingAddressCity": {
          "type": "string"
        },
        "CompanyBillingAddressState": {
          "type": "string"
        },
        "CompanyBillingAddressPostCode": {
          "type": "string"
        },
        "CompanyBillingAddressCountryCode": {
          "type": "string"
        },
        "ContactEmail": {
          "type": "string"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "PositionTitle": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "UpdateExisting": {
          "type": "boolean"
        }
      }
    },
    "CreditNoteList": {
      "type": "object",
      "properties": {
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "CreditNotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditNote"
          }
        }
      }
    },
    "CreditNote": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "format": "int64",
          "type": "integer"
        },
        "TransactionPrefix": {
          "type": "string"
        },
        "CreditNoteNumber": {
          "type": "string"
        },
        "CustomerIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "DateIssued": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionStatusCode": {
          "type": "string"
        },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "TotalAmount": {
          "format": "double",
          "type": "number"
        },
        "Notes": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "CreditNoteAllocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditNoteAllocation"
          }
        },
        "CreditNoteLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditNoteLineItem"
          }
        }
      }
    },
    "CreditNoteAllocation": {
      "type": "object",
      "properties": {
        "TransactionAllocationID": {
          "format": "int64",
          "type": "integer"
        },
        "InvoiceTransactionIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "CreditNoteTransactionIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "AllocationDate": {
          "format": "date-time",
          "type": "string"
        },
        "AllocationAmount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "CreditNoteLineItem": {
      "type": "object",
      "properties": {
        "TransactionLineItemID": {
          "format": "int64",
          "type": "integer"
        },
        "Description": {
          "type": "string"
        },
        "Quantity": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "format": "double",
          "type": "number"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Discount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "CurrencyList": {
      "type": "object",
      "properties": {
        "Currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          }
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "CurrencyCode": {
          "type": "string"
        },
        "DecimalPlaces": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EstimateList": {
      "type": "object",
      "properties": {
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "Estimates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EstimateDetails"
          }
        }
      }
    },
    "EstimateDetails": {
      "type": "object",
      "properties": {
        "EstimateID": {
          "format": "int64",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "EstimatePrefix": {
          "type": "string"
        },
        "EstimateItemNumber": {
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "DateIssued": {
          "format": "date-time",
          "type": "string"
        },
        "DateSent": {
          "format": "date-time",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "type": "string"
        },
        "EstimateStatusCode": {
          "type": "string"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "EstimateTaxConfigCode": {
          "type": "string"
        },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "TotalAmount": {
          "format": "double",
          "type": "number"
        },
        "ExchangeRate": {
          "format": "double",
          "type": "number"
        },
        "Notes": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "LineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EstimateLineItemDetails"
          }
        },
        "Links": {
          "$ref": "#/definitions/EstimateLinks"
        },
        "Issuer": {
          "$ref": "#/definitions/IssuerDetails"
        },
        "Recipient": {
          "$ref": "#/definitions/RecipientDetails"
        }
      }
    },
    "EstimateLineItemDetails": {
      "type": "object",
      "properties": {
        "EstimateLineItemID": {
          "format": "int64",
          "type": "integer"
        },
        "InventoryItemIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "InventoryItemName": {
          "type": "string"
        },
        "InventoryItemSKU": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Quantity": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "format": "double",
          "type": "number"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaxCode": {
          "type": "string"
        },
        "TaxName": {
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Discount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "EstimateLinks": {
      "type": "object",
      "properties": {
        "ClientView": {
          "type": "string"
        },
        "View": {
          "type": "string"
        },
        "Edit": {
          "type": "string"
        }
      }
    },
    "IssuerDetails": {
      "type": "object",
      "properties": {
        "BillingAddress": {
          "type": "string"
        },
        "BillingAddressLine": {
          "type": "string"
        },
        "BillingAddressCity": {
          "type": "string"
        },
        "BillingAddressState": {
          "type": "string"
        },
        "BillingAddressPostCode": {
          "type": "string"
        },
        "BillingCountryCode": {
          "type": "string"
        },
        "TaxNumber": {
          "type": "string"
        }
      }
    },
    "RecipientDetails": {
      "type": "object",
      "properties": {
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "RecipientFormattedBillingAddress": {
          "type": "string"
        },
        "RecipientBillingAddressLine": {
          "type": "string"
        },
        "RecipientBillingAddressCity": {
          "type": "string"
        },
        "RecipientBillingAddressState": {
          "type": "string"
        },
        "RecipientBillingAddressPostCode": {
          "type": "string"
        },
        "RecipientBillingAddressCountryCode": {
          "type": "string"
        }
      }
    },
    "ExpenseList": {
      "type": "object",
      "properties": {
        "Expenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpenseDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExpenseDetails": {
      "type": "object",
      "properties": {
        "ExpenseID": {
          "format": "int64",
          "type": "integer"
        },
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "CustomerIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CustomerName": {
          "type": "string"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectTitle": {
          "type": "string"
        },
        "ExpenseCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ExpenseCategoryName": {
          "type": "string"
        },
        "ExpenseCategoryHasUnitPrice": {
          "type": "boolean"
        },
        "ExpenseCategoryUnitPrice": {
          "format": "double",
          "type": "number"
        },
        "ExpenseCategoryUnitName": {
          "type": "string"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "type": "number"
        },
        "Quantity": {
          "format": "double",
          "type": "number"
        },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TransactionTaxConfigCode": {
          "type": "string"
        },
        "ExpenseApprovalStatusCode": {
          "type": "string"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "ChargeableStatusCode": {
          "type": "string"
        },
        "isReimbursable": {
          "type": "boolean"
        },
        "ExpenseReimbursementStatusCode": {
          "type": "string"
        },
        "ExpenseDate": {
          "format": "date-time",
          "type": "string"
        },
        "AttachmentURL": {
          "type": "string"
        },
        "Merchant": {
          "type": "string"
        },
        "MerchantTaxNumber": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "ExpenseReportIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "ExpenseReportName": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NewExpense": {
      "type": "object",
      "properties": {
        "ExpenseDate": {
          "format": "date-time",
          "description": "The date of the expense entry (Required)",
          "type": "string"
        },
        "UserIDFK": {
          "format": "int32",
          "description": "UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided",
          "type": "integer"
        },
        "UserEmail": {
          "description": "The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.",
          "type": "string"
        },
        "ExpenseCategoryIDFK": {
          "format": "int32",
          "description": "The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided",
          "type": "integer"
        },
        "ExpenseCategoryName": {
          "description": "Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.",
          "type": "string"
        },
        "isChargeable": {
          "description": "aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.",
          "type": "boolean"
        },
        "isReimbursable": {
          "description": "Defaults to false if not provided.",
          "type": "boolean"
        },
        "CustomerIDFK": {
          "format": "int32",
          "description": "The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.",
          "type": "integer"
        },
        "CustomerName": {
          "description": "The name of an existing customer in Avaza. Must be an exact (case insensitive) match.",
          "type": "string"
        },
        "ProjectIDFK": {
          "format": "int32",
          "description": "The Avaza project ID to associate the Expense with.",
          "type": "integer"
        },
        "ProjectName": {
          "description": "Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.",
          "type": "string"
        },
        "CurrencyCode": {
          "description": "A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)",
          "type": "number"
        },
        "Amount": {
          "format": "double",
          "description": "Expense Amount (Required). Must be &gt;= 0",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "description": "Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.",
          "type": "integer"
        },
        "TaxName": {
          "description": "Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.",
          "type": "string"
        },
        "TransactionTaxConfigCode": {
          "description": "Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.",
          "type": "string"
        },
        "GroupTripName": {
          "description": "Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.",
          "type": "string"
        },
        "Merchant": {
          "description": "The name of the merchant.",
          "type": "string"
        },
        "MerchantTaxNumer": {
          "description": "A Tax number identifier for the merchant.",
          "type": "string"
        },
        "Notes": {
          "description": "Expense Notes",
          "type": "string"
        }
      }
    },
    "InventoryList": {
      "type": "object",
      "properties": {
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "Inventory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItem"
          }
        }
      }
    },
    "InventoryItem": {
      "type": "object",
      "properties": {
        "InventoryItemID": {
          "format": "int64",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SKU": {
          "type": "string"
        },
        "CostPrice": {
          "format": "double",
          "type": "number"
        },
        "SalePrice": {
          "format": "double",
          "type": "number"
        },
        "SaleTaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "isHidden": {
          "type": "boolean"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "InvoiceList": {
      "type": "object",
      "properties": {
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "Invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        }
      }
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "format": "int64",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TransactionPrefix": {
          "type": "string"
        },
        "InvoiceNumber": {
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "DateIssued": {
          "format": "date-time",
          "type": "string"
        },
        "DateSent": {
          "format": "date-time",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionStatusCode": {
          "type": "string"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "TransactionTaxConfigCode": {
          "type": "string"
        },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "TotalAmount": {
          "format": "double",
          "type": "number"
        },
        "ExchangeRate": {
          "format": "double",
          "type": "number"
        },
        "Notes": {
          "type": "string"
        },
        "CustomerPONumber": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "LineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvoiceLineItem"
          }
        },
        "Links": {
          "$ref": "#/definitions/InvoiceLinks"
        },
        "Issuer": {
          "$ref": "#/definitions/IssuerDetails"
        },
        "Recipient": {
          "$ref": "#/definitions/RecipientDetails"
        }
      }
    },
    "InvoiceLineItem": {
      "type": "object",
      "properties": {
        "TransactionLineItemID": {
          "format": "int64",
          "type": "integer"
        },
        "InventoryItemIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "InventoryItemName": {
          "type": "string"
        },
        "InventoryItemSKU": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Quantity": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "format": "double",
          "type": "number"
        },
        "TaxAmount": {
          "format": "double",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaxCode": {
          "type": "string"
        },
        "TaxName": {
          "type": "string"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectTitle": {
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Discount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "InvoiceLinks": {
      "type": "object",
      "properties": {
        "ClientView": {
          "type": "string"
        },
        "View": {
          "type": "string"
        },
        "Edit": {
          "type": "string"
        }
      }
    },
    "NewInvoice": {
      "description": "New invoice to be created",
      "type": "object",
      "properties": {
        "TransactionPrefix": {
          "description": "A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.",
          "type": "string"
        },
        "InvoiceNumber": {
          "description": "Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.",
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "description": "If left blank then you must specify Company Name.",
          "type": "integer"
        },
        "CompanyName": {
          "description": "If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.",
          "type": "string"
        },
        "Firstname": {
          "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
          "type": "string"
        },
        "Lastname": {
          "description": "Specified value will be used to create a new customer contact only if a new customer is being created.",
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "CurrencyCode": {
          "description": "Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.",
          "type": "number"
        },
        "InvoiceTemplateIDFK": {
          "format": "int32",
          "description": "If left blank the account default invoice template will be used.",
          "type": "integer"
        },
        "Subject": {
          "description": "Plain UTF8 text. (no HTML). 255 characters max",
          "type": "string"
        },
        "CustomerPONumber": {
          "description": "Plain UTF8 text. 100 characters max",
          "type": "string"
        },
        "DateIssued": {
          "format": "date-time",
          "description": "If not specified it will use today's date. The date should be specified as local date.",
          "type": "string"
        },
        "PaymentTerms": {
          "format": "int32",
          "description": " \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:\r\n(-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)",
          "type": "integer"
        },
        "DueDate": {
          "format": "date-time",
          "description": "It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)",
          "type": "string"
        },
        "TransactionTaxConfigCode": {
          "description": "Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.",
          "type": "string"
        },
        "Notes": {
          "description": "Plain UTF8 text. (no HTML). Max 2000 characters",
          "type": "string"
        },
        "LineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewInvoiceLineItem"
          }
        }
      }
    },
    "NewInvoiceLineItem": {
      "description": "Line item to be added to new invoice",
      "required": [
        "Quantity",
        "UnitPrice"
      ],
      "type": "object",
      "properties": {
        "InventoryItemIDFK": {
          "format": "int32",
          "description": "If not specified then Inventory Item Name must be specified.",
          "type": "integer"
        },
        "InventoryItemName": {
          "description": "If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.",
          "type": "string"
        },
        "Description": {
          "description": "Plain UTF8 text. (no HTML)",
          "type": "string"
        },
        "Quantity": {
          "format": "double",
          "description": "The quantity for the line item",
          "type": "number"
        },
        "UnitPrice": {
          "format": "double",
          "description": "The unit price for the lineitem.",
          "type": "number"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaxName": {
          "description": "Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.",
          "type": "string"
        },
        "TaxPercent": {
          "format": "double",
          "description": "The Tax Percent will only be used if a new tax is being created.",
          "type": "number"
        },
        "Discount": {
          "format": "double",
          "description": "Enter 10.5 to give a 10.5% discount",
          "type": "number"
        },
        "ProjectIDFK": {
          "format": "int32",
          "description": "Optional. Project ID of an Avaza Project that belongs to this customer, so line item is attributed to that Project for reporting.",
          "type": "integer"
        }
      }
    },
    "PaymentList": {
      "type": "object",
      "properties": {
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "Payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        }
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "format": "int64",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TransactionPrefix": {
          "type": "string"
        },
        "PaymentNumber": {
          "type": "string"
        },
        "TransactionReference": {
          "type": "string"
        },
        "CustomerIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "DateIssued": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionStatusCode": {
          "type": "string"
        },
        "PaymentProviderCode": {
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "type": "number"
        },
        "Balance": {
          "format": "double",
          "type": "number"
        },
        "CurrencyCode": {
          "type": "string"
        },
        "TotalAmount": {
          "format": "double",
          "type": "number"
        },
        "Notes": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "PaymentAllocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentAllocation"
          }
        }
      }
    },
    "PaymentAllocation": {
      "type": "object",
      "properties": {
        "TransactionAllocationID": {
          "format": "int64",
          "type": "integer"
        },
        "InvoiceTransactionIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "PaymentTransactionIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "AllocationDate": {
          "format": "date-time",
          "type": "string"
        },
        "AllocationAmount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "NewPayment": {
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "PaymentNumber": {
          "description": "Optional. If not specified will be automatically generated",
          "type": "string"
        },
        "DateIssued": {
          "format": "date-time",
          "description": "Date of Payment. If not specified, assumes today.",
          "type": "string"
        },
        "TransactionPrefix": {
          "description": "Optional to override the default prefix added to Payment Numbers",
          "type": "string"
        },
        "CustomerIDFK": {
          "format": "int32",
          "description": "Only required if no invoice allocations specified.",
          "type": "integer"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.",
          "type": "number"
        },
        "TransactionReference": {
          "description": "Optional for storing the reference # of the payment method.",
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "PaymentProviderCode": {
          "description": "Optional for storing the payment provider who was the source of funds.",
          "type": "string"
        },
        "PaymentAllocations": {
          "description": "List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewPaymentAllocation"
          }
        }
      }
    },
    "NewPaymentAllocation": {
      "type": "object",
      "properties": {
        "InvoiceTransactionIDFK": {
          "format": "int64",
          "description": "The Avaza Invoice TransactionID that is having a payment amount allocated to it.",
          "type": "integer"
        },
        "AllocationAmount": {
          "format": "double",
          "description": "The Amount being allocated to the invoice. Expects same currency as invoice currency",
          "type": "number"
        },
        "AllocationDate": {
          "format": "date-time",
          "description": "Optional. Defaults to the current time in the Avaza account's timezone. The date the allocation is applied to the invoice. Can be difference from the Payment Date when doing prepayments etc.",
          "type": "string"
        }
      }
    },
    "ProjectList": {
      "type": "object",
      "properties": {
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectListDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectListDetails": {
      "type": "object",
      "properties": {
        "ProjectID": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "isArchived": {
          "type": "boolean"
        },
        "Notes": {
          "type": "string"
        },
        "CompanyName": {
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "isTaskRequiredOnTimesheet": {
          "type": "boolean"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NewProjectModel": {
      "required": [
        "ProjectTitle"
      ],
      "type": "object",
      "properties": {
        "CompanyIDFK": {
          "format": "int32",
          "description": "An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName",
          "type": "integer"
        },
        "CompanyName": {
          "description": "The name for a Company to create the project under. Will create company unless it matches an existing company name",
          "type": "string"
        },
        "CurrencyCode": {
          "description": "The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.",
          "type": "string"
        },
        "ProjectTitle": {
          "description": "The title of the new project. (255 characters max)",
          "type": "string"
        },
        "ProjectNotes": {
          "description": "Any descriptive notes about the project. (2000 characters max)",
          "type": "string"
        },
        "TimesheetApprovalRequiredbyDefault": {
          "type": "boolean"
        },
        "PopulateDefaultProjectMembers": {
          "type": "boolean"
        },
        "isTaskRequiredOnTimesheet": {
          "type": "boolean"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "BudgetAmount": {
          "format": "double",
          "type": "number"
        },
        "BudgetHours": {
          "format": "double",
          "type": "number"
        },
        "ProjectStatusCode": {
          "type": "string"
        },
        "ProjectCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectDetails": {
      "type": "object",
      "properties": {
        "ProjectID": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "CompanyName": {
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectStatusCode": {
          "description": "Possible values: NotStarted, InProgress, Complete",
          "type": "string"
        },
        "isArchived": {
          "type": "boolean"
        },
        "ProjectBillableTypeCode": {
          "description": "Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly",
          "type": "string"
        },
        "ProjectBudgetTypeCode": {
          "description": "Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours",
          "type": "string"
        },
        "BudgetAmount": {
          "format": "double",
          "type": "number"
        },
        "BudgetHours": {
          "format": "double",
          "type": "number"
        },
        "ProjectHourlyRate": {
          "format": "double",
          "type": "number"
        },
        "ProjectCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectCategoryName": {
          "type": "string"
        },
        "isTaskRequiredOnTimesheet": {
          "type": "boolean"
        },
        "ProjectCategoryColor": {
          "description": "Html Hex Color Code starting with #",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSectionDetails"
          }
        },
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMemberDetails"
          }
        },
        "ProjectTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTagItem"
          }
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ProjectSectionDetails": {
      "type": "object",
      "properties": {
        "SectionID": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ProjectMemberDetails": {
      "type": "object",
      "properties": {
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "Fullname": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "CostAmount": {
          "format": "double",
          "type": "number"
        },
        "RateAmount": {
          "format": "double",
          "type": "number"
        },
        "BudgetAmount": {
          "format": "double",
          "type": "number"
        },
        "isMemberDisabled": {
          "type": "boolean"
        },
        "isProjectManager": {
          "type": "boolean"
        },
        "isTimesheetAllowed": {
          "type": "boolean"
        },
        "isTimesheetApprover": {
          "type": "boolean"
        },
        "isTimesheetApprovalRequired": {
          "type": "boolean"
        },
        "canCreateTasks": {
          "type": "boolean"
        },
        "canDeleteTasks": {
          "type": "boolean"
        },
        "canCommentOnTasks": {
          "type": "boolean"
        },
        "canUpdateTasks": {
          "type": "boolean"
        }
      }
    },
    "ProjectTagItem": {
      "type": "object",
      "properties": {
        "ProjectTagID": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ProjectTimesheetCategoryList": {
      "type": "object",
      "properties": {
        "Categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTimesheetCategoryDetails"
          }
        }
      }
    },
    "ProjectTimesheetCategoryDetails": {
      "type": "object",
      "properties": {
        "TimeSheetCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "isBillable": {
          "type": "boolean"
        },
        "RateAmount": {
          "format": "double",
          "type": "number"
        },
        "BudgetHours": {
          "format": "double",
          "type": "number"
        },
        "CostAmount": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ScheduleAssignmentList": {
      "type": "object",
      "properties": {
        "ScheduleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleAssignmentDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ScheduleAssignmentDetails": {
      "type": "object",
      "properties": {
        "ScheduleAssignmentID": {
          "format": "int64",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduleSeriesIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "ScheduleDate": {
          "format": "date-time",
          "type": "string"
        },
        "Duration": {
          "format": "double",
          "type": "number"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ScheduleSeriesList": {
      "type": "object",
      "properties": {
        "ScheduleSeries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleSeriesDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ScheduleSeriesDetails": {
      "type": "object",
      "properties": {
        "ScheduleSeriesID": {
          "format": "int64",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectTitle": {
          "type": "string"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "TimeSheetCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TimeSheetCategoryName": {
          "type": "string"
        },
        "LeaveTypeIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "LeaveTypeName": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "HoursPerDay": {
          "format": "double",
          "type": "number"
        },
        "TotalDuration": {
          "format": "double",
          "type": "number"
        },
        "ScheduleOnDaysOff": {
          "type": "boolean"
        },
        "Notes": {
          "type": "string"
        },
        "TaskIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaskTitle": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "UpdatedByUserIDFK": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SectionList": {
      "type": "object",
      "properties": {
        "Sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SectionDetails": {
      "type": "object",
      "properties": {
        "SectionID": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "StartDateUTC": {
          "format": "date-time",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDateUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NewSection": {
      "type": "object",
      "properties": {
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "StartDateUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EndDateUTC": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "TaskList": {
      "type": "object",
      "properties": {
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TaskDetails": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectTitle": {
          "type": "string"
        },
        "SectionTitle": {
          "type": "string"
        },
        "SectionIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "DescriptionNoHTML": {
          "type": "string"
        },
        "AssignedToFirstname": {
          "type": "string"
        },
        "AssignedToLastname": {
          "type": "string"
        },
        "AssignedToEmail": {
          "type": "string"
        },
        "AssignedToUserIDFK": {
          "type": "string"
        },
        "DateStart": {
          "format": "date-time",
          "type": "string"
        },
        "DateStartUTC": {
          "format": "date-time",
          "type": "string"
        },
        "DateDue": {
          "format": "date-time",
          "type": "string"
        },
        "DateDueUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EstimatedEffort": {
          "format": "double",
          "type": "number"
        },
        "ActualTime": {
          "format": "double",
          "type": "number"
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagItem"
          }
        },
        "TaskStatusCode": {
          "type": "string"
        },
        "PercentComplete": {
          "format": "double",
          "type": "number"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "TagItem": {
      "type": "object",
      "properties": {
        "TagID": {
          "format": "int64",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        }
      }
    },
    "UpdateTask": {
      "required": [
        "TaskID",
        "FieldsToUpdate"
      ],
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "type": "integer"
        },
        "FieldsToUpdate": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "AssignedToUserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "DateStart": {
          "format": "date-time",
          "type": "string"
        },
        "DateStartUTC": {
          "format": "date-time",
          "type": "string"
        },
        "DateDue": {
          "format": "date-time",
          "type": "string"
        },
        "DateDueUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EstimatedEffort": {
          "format": "double",
          "description": "Decimal hours",
          "type": "number"
        },
        "PercentComplete": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NewTask": {
      "required": [
        "ProjectIDFK",
        "SectionIDFK",
        "Title"
      ],
      "type": "object",
      "properties": {
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "SectionIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "AssignedToUserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "DateStart": {
          "format": "date-time",
          "type": "string"
        },
        "DateStartUTC": {
          "format": "date-time",
          "type": "string"
        },
        "DateDue": {
          "format": "date-time",
          "type": "string"
        },
        "DateDueUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EstimatedEffort": {
          "format": "double",
          "description": "Decimal hours",
          "type": "number"
        },
        "Tags": {
          "description": "Collection of tags specifying Name and Color (Hex)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewTag"
          }
        }
      }
    },
    "NewTag": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        }
      }
    },
    "TaxList": {
      "type": "object",
      "properties": {
        "Taxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxItem"
          }
        }
      }
    },
    "TaxItem": {
      "type": "object",
      "properties": {
        "TaxID": {
          "format": "int32",
          "type": "integer"
        },
        "TaxCode": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CalculatedPercent": {
          "format": "double",
          "type": "number"
        },
        "TaxComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxComponent"
          }
        }
      }
    },
    "TaxComponent": {
      "type": "object",
      "properties": {
        "TaxComponentID": {
          "format": "int32",
          "type": "integer"
        },
        "TaxIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ComponentTaxCode": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Percentage": {
          "format": "double",
          "type": "number"
        },
        "isCompound": {
          "type": "boolean"
        }
      }
    },
    "TimesheetList": {
      "type": "object",
      "properties": {
        "Timesheets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetDetails"
          }
        },
        "TotalCount": {
          "format": "int32",
          "type": "integer"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TimesheetDetails": {
      "type": "object",
      "properties": {
        "TimesheetEntryID": {
          "format": "int64",
          "type": "integer"
        },
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "ProjectTitle": {
          "type": "string"
        },
        "CustomerIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CustomerName": {
          "type": "string"
        },
        "TimesheetCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryName": {
          "type": "string"
        },
        "Duration": {
          "format": "double",
          "type": "number"
        },
        "TimesheetEntryApprovalStatusCode": {
          "type": "string"
        },
        "HasTimer": {
          "type": "boolean"
        },
        "TimerStartedAtUTC": {
          "format": "date-time",
          "type": "string"
        },
        "isBillable": {
          "type": "boolean"
        },
        "isInvoiced": {
          "type": "boolean"
        },
        "EntryDate": {
          "format": "date-time",
          "type": "string"
        },
        "StartTimeLocal": {
          "format": "date-time",
          "type": "string"
        },
        "StartTimeUTC": {
          "format": "date-time",
          "type": "string"
        },
        "EndTimeLocal": {
          "format": "date-time",
          "type": "string"
        },
        "EndTimeUTC": {
          "format": "date-time",
          "type": "string"
        },
        "TimesheetUserTimeZone": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "TaskIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaskTitle": {
          "type": "string"
        },
        "InvoiceIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "InvoiceLineItemIDFK": {
          "format": "int64",
          "type": "integer"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "DateUpdated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NewTimesheet": {
      "type": "object",
      "properties": {
        "UserIDFK": {
          "format": "int32",
          "description": "UserID for a Timesheet user in Avaza",
          "type": "integer"
        },
        "ProjectIDFK": {
          "format": "int32",
          "description": "The project to associate the timesheet with.",
          "type": "integer"
        },
        "TimesheetCategoryIDFK": {
          "format": "int32",
          "description": "The Project timesheet category to link the timesheet to",
          "type": "integer"
        },
        "Duration": {
          "format": "double",
          "description": "The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.",
          "type": "number"
        },
        "isInvoiced": {
          "description": "Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.",
          "type": "boolean"
        },
        "EntryDate": {
          "format": "date-time",
          "description": "The date of the timesheet entry, with an optional start time component.",
          "type": "string"
        },
        "hasStartEndTime": {
          "description": "If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate",
          "type": "boolean"
        },
        "Notes": {
          "description": "Timesheet Notes",
          "type": "string"
        },
        "TaskIDFK": {
          "format": "int32",
          "description": "Optional. Link the timesheet to a specific task",
          "type": "integer"
        }
      }
    },
    "UpdateTimesheetModel": {
      "required": [
        "TimeSheetEntryID",
        "FieldsToUpdate",
        "ProjectIDFK"
      ],
      "type": "object",
      "properties": {
        "TimeSheetEntryID": {
          "format": "int64",
          "type": "integer"
        },
        "FieldsToUpdate": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TimeSheetCategoryIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "TaskIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Duration": {
          "format": "double",
          "type": "number"
        },
        "EntryDate": {
          "format": "date-time",
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "hasStartEndTime": {
          "type": "boolean"
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDetails"
          }
        }
      }
    },
    "UserDetails": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "AccountIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "Email": {
          "type": "string"
        },
        "Firstname": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "PositionTitle": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "isTeamMember": {
          "type": "boolean"
        },
        "CompanyIDFK": {
          "format": "int32",
          "type": "integer"
        },
        "CompanyName": {
          "type": "string"
        },
        "DefaultBillableRate": {
          "format": "double",
          "type": "number"
        },
        "DefaultCostRate": {
          "format": "double",
          "type": "number"
        },
        "MondayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "TuesdayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "WednesdayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "ThursdayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "FridayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "SaturdayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "SundayAvailableHours": {
          "format": "double",
          "type": "number"
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDetails"
          }
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTagDetails"
          }
        }
      }
    },
    "RoleDetails": {
      "type": "object",
      "properties": {
        "RoleCode": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "UserTagDetails": {
      "type": "object",
      "properties": {
        "UserTagID": {
          "format": "int32",
          "type": "integer"
        },
        "UserTagName": {
          "type": "string"
        }
      }
    },
    "CreateSubscription": {
      "description": "New Subscription to be Created",
      "required": [
        "target_url",
        "event"
      ],
      "type": "object",
      "properties": {
        "target_url": {
          "description": "The URL that should be notified of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event code to be notified about. Possible values: company_created, contact_created, invoice_created, invoice_sent, project_created, task_created",
          "type": "string"
        },
        "secret": {
          "description": "Optional Secret string (255 char max). If provided, the secret will be BASE 64 encoded and used as a basic authentication http header with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]\"",
          "type": "string"
        }
      }
    },
    "SubscribeResult": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "WebhookList": {
      "type": "object",
      "properties": {
        "Webhooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookDetails"
          }
        }
      }
    },
    "WebhookDetails": {
      "type": "object",
      "properties": {
        "SubscriptionID": {
          "format": "int32",
          "type": "integer"
        },
        "EventCode": {
          "type": "string"
        },
        "NotificationURL": {
          "type": "string"
        },
        "UserIDFK": {
          "format": "int32",
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant",
      "flow": "implicit",
      "authorizationUrl": "https://any.avaza.com/oauth2/authorize",
      "scopes": {
        "read_contacts": "Read access to Customers, Contacts",
        "read_account": "Read access to Account metadata",
        "read_users": "Read access to User Profiles",
        "read_financials": "Read access to Estimates, Invoices, Payments, Credit Notes",
        "read_projects": "Read access to Projects, Project Settings, Tasks",
        "read_schedule": "Read access to Schedule Details",
        "read_timesheets": "Read access to Timesheet Details",
        "read_expenses": "Read access to Expense Details",
        "write_contacts": "Write access to Customers, Contacts",
        "write_account": "Write access to Account metadata",
        "write_users": "Write access to User Profiles",
        "write_financials": "Write access to Estimates, Invoices, Payments, Credit Notes",
        "write_projects": "Write access to Projects, Project Settings, Tasks",
        "write_schedule": "Write access to Schedule module",
        "write_timesheets": "Write access to Timesheets module",
        "write_expenses": "Write access to Expense module",
        "webhook_notifications": "Read access to webhook notification events"
      }
    }
  }
}
