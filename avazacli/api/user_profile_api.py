# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from avazacli.api_client import ApiClient


class UserProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_profile_get(self, **kwargs):  # noqa: E501
        """Get Collection of Users who have roles in the current Avaza account.  # noqa: E501

        Admin and Invoice Managers can see all. Other users are limited to seeing their own profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_profile_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str roles: Optional list of comma separated role codes to filter users by (e.g. \"TimesheetUser,Admin\")
        :param str tags:
        :param bool current_user_only: Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)
        :param int company_idfk: Optionally filter by Company ID
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_profile_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_profile_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_profile_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Collection of Users who have roles in the current Avaza account.  # noqa: E501

        Admin and Invoice Managers can see all. Other users are limited to seeing their own profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_profile_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str roles: Optional list of comma separated role codes to filter users by (e.g. \"TimesheetUser,Admin\")
        :param str tags:
        :param bool current_user_only: Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)
        :param int company_idfk: Optionally filter by Company ID
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['roles', 'tags', 'current_user_only', 'company_idfk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_profile_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'roles' in params:
            query_params.append(('Roles', params['roles']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('Tags', params['tags']))  # noqa: E501
        if 'current_user_only' in params:
            query_params.append(('CurrentUserOnly', params['current_user_only']))  # noqa: E501
        if 'company_idfk' in params:
            query_params.append(('CompanyIDFK', params['company_idfk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/UserProfile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserList',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
