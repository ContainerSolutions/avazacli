# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'company_name': 'str',
        'subdomain': 'str',
        'has_start_end_timesheets': 'bool',
        'has24_hour_timesheet_format': 'bool',
        'weekly_timesheet_reminder': 'bool',
        'lock_approved_timesheets': 'bool',
        'timesheet_day_of_week': 'int',
        'timesheet_display_format_code': 'str',
        'allow_hiding_completed_tasks_on_timesheet': 'bool',
        'current_server_time_iso': 'str'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'company_name': 'CompanyName',
        'subdomain': 'Subdomain',
        'has_start_end_timesheets': 'hasStartEndTimesheets',
        'has24_hour_timesheet_format': 'has24HourTimesheetFormat',
        'weekly_timesheet_reminder': 'WeeklyTimesheetReminder',
        'lock_approved_timesheets': 'LockApprovedTimesheets',
        'timesheet_day_of_week': 'TimesheetDayOfWeek',
        'timesheet_display_format_code': 'TimesheetDisplayFormatCode',
        'allow_hiding_completed_tasks_on_timesheet': 'AllowHidingCompletedTasksOnTimesheet',
        'current_server_time_iso': 'CurrentServerTimeISO'
    }

    def __init__(self, account_id=None, company_name=None, subdomain=None, has_start_end_timesheets=None, has24_hour_timesheet_format=None, weekly_timesheet_reminder=None, lock_approved_timesheets=None, timesheet_day_of_week=None, timesheet_display_format_code=None, allow_hiding_completed_tasks_on_timesheet=None, current_server_time_iso=None):  # noqa: E501
        """AccountDetails - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._company_name = None
        self._subdomain = None
        self._has_start_end_timesheets = None
        self._has24_hour_timesheet_format = None
        self._weekly_timesheet_reminder = None
        self._lock_approved_timesheets = None
        self._timesheet_day_of_week = None
        self._timesheet_display_format_code = None
        self._allow_hiding_completed_tasks_on_timesheet = None
        self._current_server_time_iso = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if company_name is not None:
            self.company_name = company_name
        if subdomain is not None:
            self.subdomain = subdomain
        if has_start_end_timesheets is not None:
            self.has_start_end_timesheets = has_start_end_timesheets
        if has24_hour_timesheet_format is not None:
            self.has24_hour_timesheet_format = has24_hour_timesheet_format
        if weekly_timesheet_reminder is not None:
            self.weekly_timesheet_reminder = weekly_timesheet_reminder
        if lock_approved_timesheets is not None:
            self.lock_approved_timesheets = lock_approved_timesheets
        if timesheet_day_of_week is not None:
            self.timesheet_day_of_week = timesheet_day_of_week
        if timesheet_display_format_code is not None:
            self.timesheet_display_format_code = timesheet_display_format_code
        if allow_hiding_completed_tasks_on_timesheet is not None:
            self.allow_hiding_completed_tasks_on_timesheet = allow_hiding_completed_tasks_on_timesheet
        if current_server_time_iso is not None:
            self.current_server_time_iso = current_server_time_iso

    @property
    def account_id(self):
        """Gets the account_id of this AccountDetails.  # noqa: E501


        :return: The account_id of this AccountDetails.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountDetails.


        :param account_id: The account_id of this AccountDetails.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def company_name(self):
        """Gets the company_name of this AccountDetails.  # noqa: E501


        :return: The company_name of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountDetails.


        :param company_name: The company_name of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def subdomain(self):
        """Gets the subdomain of this AccountDetails.  # noqa: E501


        :return: The subdomain of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this AccountDetails.


        :param subdomain: The subdomain of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def has_start_end_timesheets(self):
        """Gets the has_start_end_timesheets of this AccountDetails.  # noqa: E501


        :return: The has_start_end_timesheets of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._has_start_end_timesheets

    @has_start_end_timesheets.setter
    def has_start_end_timesheets(self, has_start_end_timesheets):
        """Sets the has_start_end_timesheets of this AccountDetails.


        :param has_start_end_timesheets: The has_start_end_timesheets of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._has_start_end_timesheets = has_start_end_timesheets

    @property
    def has24_hour_timesheet_format(self):
        """Gets the has24_hour_timesheet_format of this AccountDetails.  # noqa: E501


        :return: The has24_hour_timesheet_format of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._has24_hour_timesheet_format

    @has24_hour_timesheet_format.setter
    def has24_hour_timesheet_format(self, has24_hour_timesheet_format):
        """Sets the has24_hour_timesheet_format of this AccountDetails.


        :param has24_hour_timesheet_format: The has24_hour_timesheet_format of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._has24_hour_timesheet_format = has24_hour_timesheet_format

    @property
    def weekly_timesheet_reminder(self):
        """Gets the weekly_timesheet_reminder of this AccountDetails.  # noqa: E501


        :return: The weekly_timesheet_reminder of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._weekly_timesheet_reminder

    @weekly_timesheet_reminder.setter
    def weekly_timesheet_reminder(self, weekly_timesheet_reminder):
        """Sets the weekly_timesheet_reminder of this AccountDetails.


        :param weekly_timesheet_reminder: The weekly_timesheet_reminder of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._weekly_timesheet_reminder = weekly_timesheet_reminder

    @property
    def lock_approved_timesheets(self):
        """Gets the lock_approved_timesheets of this AccountDetails.  # noqa: E501


        :return: The lock_approved_timesheets of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._lock_approved_timesheets

    @lock_approved_timesheets.setter
    def lock_approved_timesheets(self, lock_approved_timesheets):
        """Sets the lock_approved_timesheets of this AccountDetails.


        :param lock_approved_timesheets: The lock_approved_timesheets of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._lock_approved_timesheets = lock_approved_timesheets

    @property
    def timesheet_day_of_week(self):
        """Gets the timesheet_day_of_week of this AccountDetails.  # noqa: E501


        :return: The timesheet_day_of_week of this AccountDetails.  # noqa: E501
        :rtype: int
        """
        return self._timesheet_day_of_week

    @timesheet_day_of_week.setter
    def timesheet_day_of_week(self, timesheet_day_of_week):
        """Sets the timesheet_day_of_week of this AccountDetails.


        :param timesheet_day_of_week: The timesheet_day_of_week of this AccountDetails.  # noqa: E501
        :type: int
        """

        self._timesheet_day_of_week = timesheet_day_of_week

    @property
    def timesheet_display_format_code(self):
        """Gets the timesheet_display_format_code of this AccountDetails.  # noqa: E501


        :return: The timesheet_display_format_code of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._timesheet_display_format_code

    @timesheet_display_format_code.setter
    def timesheet_display_format_code(self, timesheet_display_format_code):
        """Sets the timesheet_display_format_code of this AccountDetails.


        :param timesheet_display_format_code: The timesheet_display_format_code of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._timesheet_display_format_code = timesheet_display_format_code

    @property
    def allow_hiding_completed_tasks_on_timesheet(self):
        """Gets the allow_hiding_completed_tasks_on_timesheet of this AccountDetails.  # noqa: E501


        :return: The allow_hiding_completed_tasks_on_timesheet of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._allow_hiding_completed_tasks_on_timesheet

    @allow_hiding_completed_tasks_on_timesheet.setter
    def allow_hiding_completed_tasks_on_timesheet(self, allow_hiding_completed_tasks_on_timesheet):
        """Sets the allow_hiding_completed_tasks_on_timesheet of this AccountDetails.


        :param allow_hiding_completed_tasks_on_timesheet: The allow_hiding_completed_tasks_on_timesheet of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._allow_hiding_completed_tasks_on_timesheet = allow_hiding_completed_tasks_on_timesheet

    @property
    def current_server_time_iso(self):
        """Gets the current_server_time_iso of this AccountDetails.  # noqa: E501

        Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"  # noqa: E501

        :return: The current_server_time_iso of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._current_server_time_iso

    @current_server_time_iso.setter
    def current_server_time_iso(self, current_server_time_iso):
        """Sets the current_server_time_iso of this AccountDetails.

        Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"  # noqa: E501

        :param current_server_time_iso: The current_server_time_iso of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._current_server_time_iso = current_server_time_iso

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
