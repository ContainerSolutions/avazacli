# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectMemberDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_idfk': 'int',
        'firstname': 'str',
        'lastname': 'str',
        'fullname': 'str',
        'email': 'str',
        'cost_amount': 'float',
        'rate_amount': 'float',
        'budget_amount': 'float',
        'is_member_disabled': 'bool',
        'is_project_manager': 'bool',
        'is_timesheet_allowed': 'bool',
        'is_timesheet_approver': 'bool',
        'is_timesheet_approval_required': 'bool',
        'can_create_tasks': 'bool',
        'can_delete_tasks': 'bool',
        'can_comment_on_tasks': 'bool',
        'can_update_tasks': 'bool'
    }

    attribute_map = {
        'user_idfk': 'UserIDFK',
        'firstname': 'Firstname',
        'lastname': 'Lastname',
        'fullname': 'Fullname',
        'email': 'Email',
        'cost_amount': 'CostAmount',
        'rate_amount': 'RateAmount',
        'budget_amount': 'BudgetAmount',
        'is_member_disabled': 'isMemberDisabled',
        'is_project_manager': 'isProjectManager',
        'is_timesheet_allowed': 'isTimesheetAllowed',
        'is_timesheet_approver': 'isTimesheetApprover',
        'is_timesheet_approval_required': 'isTimesheetApprovalRequired',
        'can_create_tasks': 'canCreateTasks',
        'can_delete_tasks': 'canDeleteTasks',
        'can_comment_on_tasks': 'canCommentOnTasks',
        'can_update_tasks': 'canUpdateTasks'
    }

    def __init__(self, user_idfk=None, firstname=None, lastname=None, fullname=None, email=None, cost_amount=None, rate_amount=None, budget_amount=None, is_member_disabled=None, is_project_manager=None, is_timesheet_allowed=None, is_timesheet_approver=None, is_timesheet_approval_required=None, can_create_tasks=None, can_delete_tasks=None, can_comment_on_tasks=None, can_update_tasks=None):  # noqa: E501
        """ProjectMemberDetails - a model defined in Swagger"""  # noqa: E501

        self._user_idfk = None
        self._firstname = None
        self._lastname = None
        self._fullname = None
        self._email = None
        self._cost_amount = None
        self._rate_amount = None
        self._budget_amount = None
        self._is_member_disabled = None
        self._is_project_manager = None
        self._is_timesheet_allowed = None
        self._is_timesheet_approver = None
        self._is_timesheet_approval_required = None
        self._can_create_tasks = None
        self._can_delete_tasks = None
        self._can_comment_on_tasks = None
        self._can_update_tasks = None
        self.discriminator = None

        if user_idfk is not None:
            self.user_idfk = user_idfk
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if fullname is not None:
            self.fullname = fullname
        if email is not None:
            self.email = email
        if cost_amount is not None:
            self.cost_amount = cost_amount
        if rate_amount is not None:
            self.rate_amount = rate_amount
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if is_member_disabled is not None:
            self.is_member_disabled = is_member_disabled
        if is_project_manager is not None:
            self.is_project_manager = is_project_manager
        if is_timesheet_allowed is not None:
            self.is_timesheet_allowed = is_timesheet_allowed
        if is_timesheet_approver is not None:
            self.is_timesheet_approver = is_timesheet_approver
        if is_timesheet_approval_required is not None:
            self.is_timesheet_approval_required = is_timesheet_approval_required
        if can_create_tasks is not None:
            self.can_create_tasks = can_create_tasks
        if can_delete_tasks is not None:
            self.can_delete_tasks = can_delete_tasks
        if can_comment_on_tasks is not None:
            self.can_comment_on_tasks = can_comment_on_tasks
        if can_update_tasks is not None:
            self.can_update_tasks = can_update_tasks

    @property
    def user_idfk(self):
        """Gets the user_idfk of this ProjectMemberDetails.  # noqa: E501


        :return: The user_idfk of this ProjectMemberDetails.  # noqa: E501
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this ProjectMemberDetails.


        :param user_idfk: The user_idfk of this ProjectMemberDetails.  # noqa: E501
        :type: int
        """

        self._user_idfk = user_idfk

    @property
    def firstname(self):
        """Gets the firstname of this ProjectMemberDetails.  # noqa: E501


        :return: The firstname of this ProjectMemberDetails.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ProjectMemberDetails.


        :param firstname: The firstname of this ProjectMemberDetails.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ProjectMemberDetails.  # noqa: E501


        :return: The lastname of this ProjectMemberDetails.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ProjectMemberDetails.


        :param lastname: The lastname of this ProjectMemberDetails.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def fullname(self):
        """Gets the fullname of this ProjectMemberDetails.  # noqa: E501


        :return: The fullname of this ProjectMemberDetails.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this ProjectMemberDetails.


        :param fullname: The fullname of this ProjectMemberDetails.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def email(self):
        """Gets the email of this ProjectMemberDetails.  # noqa: E501


        :return: The email of this ProjectMemberDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProjectMemberDetails.


        :param email: The email of this ProjectMemberDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def cost_amount(self):
        """Gets the cost_amount of this ProjectMemberDetails.  # noqa: E501


        :return: The cost_amount of this ProjectMemberDetails.  # noqa: E501
        :rtype: float
        """
        return self._cost_amount

    @cost_amount.setter
    def cost_amount(self, cost_amount):
        """Sets the cost_amount of this ProjectMemberDetails.


        :param cost_amount: The cost_amount of this ProjectMemberDetails.  # noqa: E501
        :type: float
        """

        self._cost_amount = cost_amount

    @property
    def rate_amount(self):
        """Gets the rate_amount of this ProjectMemberDetails.  # noqa: E501


        :return: The rate_amount of this ProjectMemberDetails.  # noqa: E501
        :rtype: float
        """
        return self._rate_amount

    @rate_amount.setter
    def rate_amount(self, rate_amount):
        """Sets the rate_amount of this ProjectMemberDetails.


        :param rate_amount: The rate_amount of this ProjectMemberDetails.  # noqa: E501
        :type: float
        """

        self._rate_amount = rate_amount

    @property
    def budget_amount(self):
        """Gets the budget_amount of this ProjectMemberDetails.  # noqa: E501


        :return: The budget_amount of this ProjectMemberDetails.  # noqa: E501
        :rtype: float
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this ProjectMemberDetails.


        :param budget_amount: The budget_amount of this ProjectMemberDetails.  # noqa: E501
        :type: float
        """

        self._budget_amount = budget_amount

    @property
    def is_member_disabled(self):
        """Gets the is_member_disabled of this ProjectMemberDetails.  # noqa: E501


        :return: The is_member_disabled of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_member_disabled

    @is_member_disabled.setter
    def is_member_disabled(self, is_member_disabled):
        """Sets the is_member_disabled of this ProjectMemberDetails.


        :param is_member_disabled: The is_member_disabled of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._is_member_disabled = is_member_disabled

    @property
    def is_project_manager(self):
        """Gets the is_project_manager of this ProjectMemberDetails.  # noqa: E501


        :return: The is_project_manager of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_project_manager

    @is_project_manager.setter
    def is_project_manager(self, is_project_manager):
        """Sets the is_project_manager of this ProjectMemberDetails.


        :param is_project_manager: The is_project_manager of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._is_project_manager = is_project_manager

    @property
    def is_timesheet_allowed(self):
        """Gets the is_timesheet_allowed of this ProjectMemberDetails.  # noqa: E501


        :return: The is_timesheet_allowed of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_timesheet_allowed

    @is_timesheet_allowed.setter
    def is_timesheet_allowed(self, is_timesheet_allowed):
        """Sets the is_timesheet_allowed of this ProjectMemberDetails.


        :param is_timesheet_allowed: The is_timesheet_allowed of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._is_timesheet_allowed = is_timesheet_allowed

    @property
    def is_timesheet_approver(self):
        """Gets the is_timesheet_approver of this ProjectMemberDetails.  # noqa: E501


        :return: The is_timesheet_approver of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_timesheet_approver

    @is_timesheet_approver.setter
    def is_timesheet_approver(self, is_timesheet_approver):
        """Sets the is_timesheet_approver of this ProjectMemberDetails.


        :param is_timesheet_approver: The is_timesheet_approver of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._is_timesheet_approver = is_timesheet_approver

    @property
    def is_timesheet_approval_required(self):
        """Gets the is_timesheet_approval_required of this ProjectMemberDetails.  # noqa: E501


        :return: The is_timesheet_approval_required of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_timesheet_approval_required

    @is_timesheet_approval_required.setter
    def is_timesheet_approval_required(self, is_timesheet_approval_required):
        """Sets the is_timesheet_approval_required of this ProjectMemberDetails.


        :param is_timesheet_approval_required: The is_timesheet_approval_required of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._is_timesheet_approval_required = is_timesheet_approval_required

    @property
    def can_create_tasks(self):
        """Gets the can_create_tasks of this ProjectMemberDetails.  # noqa: E501


        :return: The can_create_tasks of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_tasks

    @can_create_tasks.setter
    def can_create_tasks(self, can_create_tasks):
        """Sets the can_create_tasks of this ProjectMemberDetails.


        :param can_create_tasks: The can_create_tasks of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._can_create_tasks = can_create_tasks

    @property
    def can_delete_tasks(self):
        """Gets the can_delete_tasks of this ProjectMemberDetails.  # noqa: E501


        :return: The can_delete_tasks of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_tasks

    @can_delete_tasks.setter
    def can_delete_tasks(self, can_delete_tasks):
        """Sets the can_delete_tasks of this ProjectMemberDetails.


        :param can_delete_tasks: The can_delete_tasks of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._can_delete_tasks = can_delete_tasks

    @property
    def can_comment_on_tasks(self):
        """Gets the can_comment_on_tasks of this ProjectMemberDetails.  # noqa: E501


        :return: The can_comment_on_tasks of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_comment_on_tasks

    @can_comment_on_tasks.setter
    def can_comment_on_tasks(self, can_comment_on_tasks):
        """Sets the can_comment_on_tasks of this ProjectMemberDetails.


        :param can_comment_on_tasks: The can_comment_on_tasks of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._can_comment_on_tasks = can_comment_on_tasks

    @property
    def can_update_tasks(self):
        """Gets the can_update_tasks of this ProjectMemberDetails.  # noqa: E501


        :return: The can_update_tasks of this ProjectMemberDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_update_tasks

    @can_update_tasks.setter
    def can_update_tasks(self, can_update_tasks):
        """Sets the can_update_tasks of this ProjectMemberDetails.


        :param can_update_tasks: The can_update_tasks of this ProjectMemberDetails.  # noqa: E501
        :type: bool
        """

        self._can_update_tasks = can_update_tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectMemberDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
