# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewTimesheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_idfk': 'int',
        'project_idfk': 'int',
        'timesheet_category_idfk': 'int',
        'duration': 'float',
        'is_invoiced': 'bool',
        'entry_date': 'datetime',
        'has_start_end_time': 'bool',
        'notes': 'str',
        'task_idfk': 'int'
    }

    attribute_map = {
        'user_idfk': 'UserIDFK',
        'project_idfk': 'ProjectIDFK',
        'timesheet_category_idfk': 'TimesheetCategoryIDFK',
        'duration': 'Duration',
        'is_invoiced': 'isInvoiced',
        'entry_date': 'EntryDate',
        'has_start_end_time': 'hasStartEndTime',
        'notes': 'Notes',
        'task_idfk': 'TaskIDFK'
    }

    def __init__(self, user_idfk=None, project_idfk=None, timesheet_category_idfk=None, duration=None, is_invoiced=None, entry_date=None, has_start_end_time=None, notes=None, task_idfk=None):  # noqa: E501
        """NewTimesheet - a model defined in Swagger"""  # noqa: E501

        self._user_idfk = None
        self._project_idfk = None
        self._timesheet_category_idfk = None
        self._duration = None
        self._is_invoiced = None
        self._entry_date = None
        self._has_start_end_time = None
        self._notes = None
        self._task_idfk = None
        self.discriminator = None

        if user_idfk is not None:
            self.user_idfk = user_idfk
        if project_idfk is not None:
            self.project_idfk = project_idfk
        if timesheet_category_idfk is not None:
            self.timesheet_category_idfk = timesheet_category_idfk
        if duration is not None:
            self.duration = duration
        if is_invoiced is not None:
            self.is_invoiced = is_invoiced
        if entry_date is not None:
            self.entry_date = entry_date
        if has_start_end_time is not None:
            self.has_start_end_time = has_start_end_time
        if notes is not None:
            self.notes = notes
        if task_idfk is not None:
            self.task_idfk = task_idfk

    @property
    def user_idfk(self):
        """Gets the user_idfk of this NewTimesheet.  # noqa: E501

        UserID for a Timesheet user in Avaza  # noqa: E501

        :return: The user_idfk of this NewTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this NewTimesheet.

        UserID for a Timesheet user in Avaza  # noqa: E501

        :param user_idfk: The user_idfk of this NewTimesheet.  # noqa: E501
        :type: int
        """

        self._user_idfk = user_idfk

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewTimesheet.  # noqa: E501

        The project to associate the timesheet with.  # noqa: E501

        :return: The project_idfk of this NewTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewTimesheet.

        The project to associate the timesheet with.  # noqa: E501

        :param project_idfk: The project_idfk of this NewTimesheet.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    @property
    def timesheet_category_idfk(self):
        """Gets the timesheet_category_idfk of this NewTimesheet.  # noqa: E501

        The Project timesheet category to link the timesheet to  # noqa: E501

        :return: The timesheet_category_idfk of this NewTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._timesheet_category_idfk

    @timesheet_category_idfk.setter
    def timesheet_category_idfk(self, timesheet_category_idfk):
        """Sets the timesheet_category_idfk of this NewTimesheet.

        The Project timesheet category to link the timesheet to  # noqa: E501

        :param timesheet_category_idfk: The timesheet_category_idfk of this NewTimesheet.  # noqa: E501
        :type: int
        """

        self._timesheet_category_idfk = timesheet_category_idfk

    @property
    def duration(self):
        """Gets the duration of this NewTimesheet.  # noqa: E501

        The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.  # noqa: E501

        :return: The duration of this NewTimesheet.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this NewTimesheet.

        The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.  # noqa: E501

        :param duration: The duration of this NewTimesheet.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def is_invoiced(self):
        """Gets the is_invoiced of this NewTimesheet.  # noqa: E501

        Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.  # noqa: E501

        :return: The is_invoiced of this NewTimesheet.  # noqa: E501
        :rtype: bool
        """
        return self._is_invoiced

    @is_invoiced.setter
    def is_invoiced(self, is_invoiced):
        """Sets the is_invoiced of this NewTimesheet.

        Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.  # noqa: E501

        :param is_invoiced: The is_invoiced of this NewTimesheet.  # noqa: E501
        :type: bool
        """

        self._is_invoiced = is_invoiced

    @property
    def entry_date(self):
        """Gets the entry_date of this NewTimesheet.  # noqa: E501

        The date of the timesheet entry, with an optional start time component.  # noqa: E501

        :return: The entry_date of this NewTimesheet.  # noqa: E501
        :rtype: datetime
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this NewTimesheet.

        The date of the timesheet entry, with an optional start time component.  # noqa: E501

        :param entry_date: The entry_date of this NewTimesheet.  # noqa: E501
        :type: datetime
        """

        self._entry_date = entry_date

    @property
    def has_start_end_time(self):
        """Gets the has_start_end_time of this NewTimesheet.  # noqa: E501

        If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate  # noqa: E501

        :return: The has_start_end_time of this NewTimesheet.  # noqa: E501
        :rtype: bool
        """
        return self._has_start_end_time

    @has_start_end_time.setter
    def has_start_end_time(self, has_start_end_time):
        """Sets the has_start_end_time of this NewTimesheet.

        If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate  # noqa: E501

        :param has_start_end_time: The has_start_end_time of this NewTimesheet.  # noqa: E501
        :type: bool
        """

        self._has_start_end_time = has_start_end_time

    @property
    def notes(self):
        """Gets the notes of this NewTimesheet.  # noqa: E501

        Timesheet Notes  # noqa: E501

        :return: The notes of this NewTimesheet.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewTimesheet.

        Timesheet Notes  # noqa: E501

        :param notes: The notes of this NewTimesheet.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def task_idfk(self):
        """Gets the task_idfk of this NewTimesheet.  # noqa: E501

        Optional. Link the timesheet to a specific task  # noqa: E501

        :return: The task_idfk of this NewTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._task_idfk

    @task_idfk.setter
    def task_idfk(self, task_idfk):
        """Sets the task_idfk of this NewTimesheet.

        Optional. Link the timesheet to a specific task  # noqa: E501

        :param task_idfk: The task_idfk of this NewTimesheet.  # noqa: E501
        :type: int
        """

        self._task_idfk = task_idfk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewTimesheet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
