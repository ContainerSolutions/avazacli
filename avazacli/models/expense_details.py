# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExpenseDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expense_id': 'int',
        'user_idfk': 'int',
        'firstname': 'str',
        'lastname': 'str',
        'email': 'str',
        'customer_idfk': 'int',
        'customer_name': 'str',
        'project_idfk': 'int',
        'project_title': 'str',
        'expense_category_idfk': 'int',
        'expense_category_name': 'str',
        'expense_category_has_unit_price': 'bool',
        'expense_category_unit_price': 'float',
        'expense_category_unit_name': 'str',
        'currency_code': 'str',
        'exchange_rate': 'float',
        'quantity': 'float',
        'amount': 'float',
        'tax_amount': 'float',
        'tax_idfk': 'int',
        'transaction_tax_config_code': 'str',
        'expense_approval_status_code': 'str',
        'is_chargeable': 'bool',
        'chargeable_status_code': 'str',
        'is_reimbursable': 'bool',
        'expense_reimbursement_status_code': 'str',
        'expense_date': 'datetime',
        'attachment_url': 'str',
        'merchant': 'str',
        'merchant_tax_number': 'str',
        'notes': 'str',
        'expense_report_idfk': 'int',
        'expense_report_name': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'expense_id': 'ExpenseID',
        'user_idfk': 'UserIDFK',
        'firstname': 'Firstname',
        'lastname': 'Lastname',
        'email': 'Email',
        'customer_idfk': 'CustomerIDFK',
        'customer_name': 'CustomerName',
        'project_idfk': 'ProjectIDFK',
        'project_title': 'ProjectTitle',
        'expense_category_idfk': 'ExpenseCategoryIDFK',
        'expense_category_name': 'ExpenseCategoryName',
        'expense_category_has_unit_price': 'ExpenseCategoryHasUnitPrice',
        'expense_category_unit_price': 'ExpenseCategoryUnitPrice',
        'expense_category_unit_name': 'ExpenseCategoryUnitName',
        'currency_code': 'CurrencyCode',
        'exchange_rate': 'ExchangeRate',
        'quantity': 'Quantity',
        'amount': 'Amount',
        'tax_amount': 'TaxAmount',
        'tax_idfk': 'TaxIDFK',
        'transaction_tax_config_code': 'TransactionTaxConfigCode',
        'expense_approval_status_code': 'ExpenseApprovalStatusCode',
        'is_chargeable': 'isChargeable',
        'chargeable_status_code': 'ChargeableStatusCode',
        'is_reimbursable': 'isReimbursable',
        'expense_reimbursement_status_code': 'ExpenseReimbursementStatusCode',
        'expense_date': 'ExpenseDate',
        'attachment_url': 'AttachmentURL',
        'merchant': 'Merchant',
        'merchant_tax_number': 'MerchantTaxNumber',
        'notes': 'Notes',
        'expense_report_idfk': 'ExpenseReportIDFK',
        'expense_report_name': 'ExpenseReportName',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, expense_id=None, user_idfk=None, firstname=None, lastname=None, email=None, customer_idfk=None, customer_name=None, project_idfk=None, project_title=None, expense_category_idfk=None, expense_category_name=None, expense_category_has_unit_price=None, expense_category_unit_price=None, expense_category_unit_name=None, currency_code=None, exchange_rate=None, quantity=None, amount=None, tax_amount=None, tax_idfk=None, transaction_tax_config_code=None, expense_approval_status_code=None, is_chargeable=None, chargeable_status_code=None, is_reimbursable=None, expense_reimbursement_status_code=None, expense_date=None, attachment_url=None, merchant=None, merchant_tax_number=None, notes=None, expense_report_idfk=None, expense_report_name=None, date_created=None, date_updated=None):  # noqa: E501
        """ExpenseDetails - a model defined in Swagger"""  # noqa: E501

        self._expense_id = None
        self._user_idfk = None
        self._firstname = None
        self._lastname = None
        self._email = None
        self._customer_idfk = None
        self._customer_name = None
        self._project_idfk = None
        self._project_title = None
        self._expense_category_idfk = None
        self._expense_category_name = None
        self._expense_category_has_unit_price = None
        self._expense_category_unit_price = None
        self._expense_category_unit_name = None
        self._currency_code = None
        self._exchange_rate = None
        self._quantity = None
        self._amount = None
        self._tax_amount = None
        self._tax_idfk = None
        self._transaction_tax_config_code = None
        self._expense_approval_status_code = None
        self._is_chargeable = None
        self._chargeable_status_code = None
        self._is_reimbursable = None
        self._expense_reimbursement_status_code = None
        self._expense_date = None
        self._attachment_url = None
        self._merchant = None
        self._merchant_tax_number = None
        self._notes = None
        self._expense_report_idfk = None
        self._expense_report_name = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if expense_id is not None:
            self.expense_id = expense_id
        if user_idfk is not None:
            self.user_idfk = user_idfk
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if email is not None:
            self.email = email
        if customer_idfk is not None:
            self.customer_idfk = customer_idfk
        if customer_name is not None:
            self.customer_name = customer_name
        if project_idfk is not None:
            self.project_idfk = project_idfk
        if project_title is not None:
            self.project_title = project_title
        if expense_category_idfk is not None:
            self.expense_category_idfk = expense_category_idfk
        if expense_category_name is not None:
            self.expense_category_name = expense_category_name
        if expense_category_has_unit_price is not None:
            self.expense_category_has_unit_price = expense_category_has_unit_price
        if expense_category_unit_price is not None:
            self.expense_category_unit_price = expense_category_unit_price
        if expense_category_unit_name is not None:
            self.expense_category_unit_name = expense_category_unit_name
        if currency_code is not None:
            self.currency_code = currency_code
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if quantity is not None:
            self.quantity = quantity
        if amount is not None:
            self.amount = amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_idfk is not None:
            self.tax_idfk = tax_idfk
        if transaction_tax_config_code is not None:
            self.transaction_tax_config_code = transaction_tax_config_code
        if expense_approval_status_code is not None:
            self.expense_approval_status_code = expense_approval_status_code
        if is_chargeable is not None:
            self.is_chargeable = is_chargeable
        if chargeable_status_code is not None:
            self.chargeable_status_code = chargeable_status_code
        if is_reimbursable is not None:
            self.is_reimbursable = is_reimbursable
        if expense_reimbursement_status_code is not None:
            self.expense_reimbursement_status_code = expense_reimbursement_status_code
        if expense_date is not None:
            self.expense_date = expense_date
        if attachment_url is not None:
            self.attachment_url = attachment_url
        if merchant is not None:
            self.merchant = merchant
        if merchant_tax_number is not None:
            self.merchant_tax_number = merchant_tax_number
        if notes is not None:
            self.notes = notes
        if expense_report_idfk is not None:
            self.expense_report_idfk = expense_report_idfk
        if expense_report_name is not None:
            self.expense_report_name = expense_report_name
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def expense_id(self):
        """Gets the expense_id of this ExpenseDetails.  # noqa: E501


        :return: The expense_id of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._expense_id

    @expense_id.setter
    def expense_id(self, expense_id):
        """Sets the expense_id of this ExpenseDetails.


        :param expense_id: The expense_id of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._expense_id = expense_id

    @property
    def user_idfk(self):
        """Gets the user_idfk of this ExpenseDetails.  # noqa: E501


        :return: The user_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this ExpenseDetails.


        :param user_idfk: The user_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._user_idfk = user_idfk

    @property
    def firstname(self):
        """Gets the firstname of this ExpenseDetails.  # noqa: E501


        :return: The firstname of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ExpenseDetails.


        :param firstname: The firstname of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ExpenseDetails.  # noqa: E501


        :return: The lastname of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ExpenseDetails.


        :param lastname: The lastname of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def email(self):
        """Gets the email of this ExpenseDetails.  # noqa: E501


        :return: The email of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ExpenseDetails.


        :param email: The email of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this ExpenseDetails.  # noqa: E501


        :return: The customer_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this ExpenseDetails.


        :param customer_idfk: The customer_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._customer_idfk = customer_idfk

    @property
    def customer_name(self):
        """Gets the customer_name of this ExpenseDetails.  # noqa: E501


        :return: The customer_name of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ExpenseDetails.


        :param customer_name: The customer_name of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def project_idfk(self):
        """Gets the project_idfk of this ExpenseDetails.  # noqa: E501


        :return: The project_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this ExpenseDetails.


        :param project_idfk: The project_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    @property
    def project_title(self):
        """Gets the project_title of this ExpenseDetails.  # noqa: E501


        :return: The project_title of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this ExpenseDetails.


        :param project_title: The project_title of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._project_title = project_title

    @property
    def expense_category_idfk(self):
        """Gets the expense_category_idfk of this ExpenseDetails.  # noqa: E501


        :return: The expense_category_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._expense_category_idfk

    @expense_category_idfk.setter
    def expense_category_idfk(self, expense_category_idfk):
        """Sets the expense_category_idfk of this ExpenseDetails.


        :param expense_category_idfk: The expense_category_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._expense_category_idfk = expense_category_idfk

    @property
    def expense_category_name(self):
        """Gets the expense_category_name of this ExpenseDetails.  # noqa: E501


        :return: The expense_category_name of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_category_name

    @expense_category_name.setter
    def expense_category_name(self, expense_category_name):
        """Sets the expense_category_name of this ExpenseDetails.


        :param expense_category_name: The expense_category_name of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_category_name = expense_category_name

    @property
    def expense_category_has_unit_price(self):
        """Gets the expense_category_has_unit_price of this ExpenseDetails.  # noqa: E501


        :return: The expense_category_has_unit_price of this ExpenseDetails.  # noqa: E501
        :rtype: bool
        """
        return self._expense_category_has_unit_price

    @expense_category_has_unit_price.setter
    def expense_category_has_unit_price(self, expense_category_has_unit_price):
        """Sets the expense_category_has_unit_price of this ExpenseDetails.


        :param expense_category_has_unit_price: The expense_category_has_unit_price of this ExpenseDetails.  # noqa: E501
        :type: bool
        """

        self._expense_category_has_unit_price = expense_category_has_unit_price

    @property
    def expense_category_unit_price(self):
        """Gets the expense_category_unit_price of this ExpenseDetails.  # noqa: E501


        :return: The expense_category_unit_price of this ExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._expense_category_unit_price

    @expense_category_unit_price.setter
    def expense_category_unit_price(self, expense_category_unit_price):
        """Sets the expense_category_unit_price of this ExpenseDetails.


        :param expense_category_unit_price: The expense_category_unit_price of this ExpenseDetails.  # noqa: E501
        :type: float
        """

        self._expense_category_unit_price = expense_category_unit_price

    @property
    def expense_category_unit_name(self):
        """Gets the expense_category_unit_name of this ExpenseDetails.  # noqa: E501


        :return: The expense_category_unit_name of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_category_unit_name

    @expense_category_unit_name.setter
    def expense_category_unit_name(self, expense_category_unit_name):
        """Sets the expense_category_unit_name of this ExpenseDetails.


        :param expense_category_unit_name: The expense_category_unit_name of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_category_unit_name = expense_category_unit_name

    @property
    def currency_code(self):
        """Gets the currency_code of this ExpenseDetails.  # noqa: E501


        :return: The currency_code of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ExpenseDetails.


        :param currency_code: The currency_code of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ExpenseDetails.  # noqa: E501


        :return: The exchange_rate of this ExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ExpenseDetails.


        :param exchange_rate: The exchange_rate of this ExpenseDetails.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def quantity(self):
        """Gets the quantity of this ExpenseDetails.  # noqa: E501


        :return: The quantity of this ExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ExpenseDetails.


        :param quantity: The quantity of this ExpenseDetails.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def amount(self):
        """Gets the amount of this ExpenseDetails.  # noqa: E501


        :return: The amount of this ExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExpenseDetails.


        :param amount: The amount of this ExpenseDetails.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ExpenseDetails.  # noqa: E501


        :return: The tax_amount of this ExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ExpenseDetails.


        :param tax_amount: The tax_amount of this ExpenseDetails.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this ExpenseDetails.  # noqa: E501


        :return: The tax_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this ExpenseDetails.


        :param tax_idfk: The tax_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._tax_idfk = tax_idfk

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this ExpenseDetails.  # noqa: E501


        :return: The transaction_tax_config_code of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this ExpenseDetails.


        :param transaction_tax_config_code: The transaction_tax_config_code of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code

    @property
    def expense_approval_status_code(self):
        """Gets the expense_approval_status_code of this ExpenseDetails.  # noqa: E501


        :return: The expense_approval_status_code of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_approval_status_code

    @expense_approval_status_code.setter
    def expense_approval_status_code(self, expense_approval_status_code):
        """Sets the expense_approval_status_code of this ExpenseDetails.


        :param expense_approval_status_code: The expense_approval_status_code of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_approval_status_code = expense_approval_status_code

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this ExpenseDetails.  # noqa: E501


        :return: The is_chargeable of this ExpenseDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this ExpenseDetails.


        :param is_chargeable: The is_chargeable of this ExpenseDetails.  # noqa: E501
        :type: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def chargeable_status_code(self):
        """Gets the chargeable_status_code of this ExpenseDetails.  # noqa: E501


        :return: The chargeable_status_code of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._chargeable_status_code

    @chargeable_status_code.setter
    def chargeable_status_code(self, chargeable_status_code):
        """Sets the chargeable_status_code of this ExpenseDetails.


        :param chargeable_status_code: The chargeable_status_code of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._chargeable_status_code = chargeable_status_code

    @property
    def is_reimbursable(self):
        """Gets the is_reimbursable of this ExpenseDetails.  # noqa: E501


        :return: The is_reimbursable of this ExpenseDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_reimbursable

    @is_reimbursable.setter
    def is_reimbursable(self, is_reimbursable):
        """Sets the is_reimbursable of this ExpenseDetails.


        :param is_reimbursable: The is_reimbursable of this ExpenseDetails.  # noqa: E501
        :type: bool
        """

        self._is_reimbursable = is_reimbursable

    @property
    def expense_reimbursement_status_code(self):
        """Gets the expense_reimbursement_status_code of this ExpenseDetails.  # noqa: E501


        :return: The expense_reimbursement_status_code of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_reimbursement_status_code

    @expense_reimbursement_status_code.setter
    def expense_reimbursement_status_code(self, expense_reimbursement_status_code):
        """Sets the expense_reimbursement_status_code of this ExpenseDetails.


        :param expense_reimbursement_status_code: The expense_reimbursement_status_code of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_reimbursement_status_code = expense_reimbursement_status_code

    @property
    def expense_date(self):
        """Gets the expense_date of this ExpenseDetails.  # noqa: E501


        :return: The expense_date of this ExpenseDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._expense_date

    @expense_date.setter
    def expense_date(self, expense_date):
        """Sets the expense_date of this ExpenseDetails.


        :param expense_date: The expense_date of this ExpenseDetails.  # noqa: E501
        :type: datetime
        """

        self._expense_date = expense_date

    @property
    def attachment_url(self):
        """Gets the attachment_url of this ExpenseDetails.  # noqa: E501


        :return: The attachment_url of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._attachment_url

    @attachment_url.setter
    def attachment_url(self, attachment_url):
        """Sets the attachment_url of this ExpenseDetails.


        :param attachment_url: The attachment_url of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._attachment_url = attachment_url

    @property
    def merchant(self):
        """Gets the merchant of this ExpenseDetails.  # noqa: E501


        :return: The merchant of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this ExpenseDetails.


        :param merchant: The merchant of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._merchant = merchant

    @property
    def merchant_tax_number(self):
        """Gets the merchant_tax_number of this ExpenseDetails.  # noqa: E501


        :return: The merchant_tax_number of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._merchant_tax_number

    @merchant_tax_number.setter
    def merchant_tax_number(self, merchant_tax_number):
        """Sets the merchant_tax_number of this ExpenseDetails.


        :param merchant_tax_number: The merchant_tax_number of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._merchant_tax_number = merchant_tax_number

    @property
    def notes(self):
        """Gets the notes of this ExpenseDetails.  # noqa: E501


        :return: The notes of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ExpenseDetails.


        :param notes: The notes of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def expense_report_idfk(self):
        """Gets the expense_report_idfk of this ExpenseDetails.  # noqa: E501


        :return: The expense_report_idfk of this ExpenseDetails.  # noqa: E501
        :rtype: int
        """
        return self._expense_report_idfk

    @expense_report_idfk.setter
    def expense_report_idfk(self, expense_report_idfk):
        """Sets the expense_report_idfk of this ExpenseDetails.


        :param expense_report_idfk: The expense_report_idfk of this ExpenseDetails.  # noqa: E501
        :type: int
        """

        self._expense_report_idfk = expense_report_idfk

    @property
    def expense_report_name(self):
        """Gets the expense_report_name of this ExpenseDetails.  # noqa: E501


        :return: The expense_report_name of this ExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_report_name

    @expense_report_name.setter
    def expense_report_name(self, expense_report_name):
        """Sets the expense_report_name of this ExpenseDetails.


        :param expense_report_name: The expense_report_name of this ExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_report_name = expense_report_name

    @property
    def date_created(self):
        """Gets the date_created of this ExpenseDetails.  # noqa: E501


        :return: The date_created of this ExpenseDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ExpenseDetails.


        :param date_created: The date_created of this ExpenseDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ExpenseDetails.  # noqa: E501


        :return: The date_updated of this ExpenseDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ExpenseDetails.


        :param date_updated: The date_updated of this ExpenseDetails.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpenseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
