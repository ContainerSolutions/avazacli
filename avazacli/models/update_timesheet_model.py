# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateTimesheetModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_sheet_entry_id': 'int',
        'fields_to_update': 'list[str]',
        'project_idfk': 'int',
        'time_sheet_category_idfk': 'int',
        'task_idfk': 'int',
        'duration': 'float',
        'entry_date': 'datetime',
        'notes': 'str',
        'has_start_end_time': 'bool'
    }

    attribute_map = {
        'time_sheet_entry_id': 'TimeSheetEntryID',
        'fields_to_update': 'FieldsToUpdate',
        'project_idfk': 'ProjectIDFK',
        'time_sheet_category_idfk': 'TimeSheetCategoryIDFK',
        'task_idfk': 'TaskIDFK',
        'duration': 'Duration',
        'entry_date': 'EntryDate',
        'notes': 'Notes',
        'has_start_end_time': 'hasStartEndTime'
    }

    def __init__(self, time_sheet_entry_id=None, fields_to_update=None, project_idfk=None, time_sheet_category_idfk=None, task_idfk=None, duration=None, entry_date=None, notes=None, has_start_end_time=None):  # noqa: E501
        """UpdateTimesheetModel - a model defined in Swagger"""  # noqa: E501

        self._time_sheet_entry_id = None
        self._fields_to_update = None
        self._project_idfk = None
        self._time_sheet_category_idfk = None
        self._task_idfk = None
        self._duration = None
        self._entry_date = None
        self._notes = None
        self._has_start_end_time = None
        self.discriminator = None

        self.time_sheet_entry_id = time_sheet_entry_id
        self.fields_to_update = fields_to_update
        self.project_idfk = project_idfk
        if time_sheet_category_idfk is not None:
            self.time_sheet_category_idfk = time_sheet_category_idfk
        if task_idfk is not None:
            self.task_idfk = task_idfk
        if duration is not None:
            self.duration = duration
        if entry_date is not None:
            self.entry_date = entry_date
        if notes is not None:
            self.notes = notes
        if has_start_end_time is not None:
            self.has_start_end_time = has_start_end_time

    @property
    def time_sheet_entry_id(self):
        """Gets the time_sheet_entry_id of this UpdateTimesheetModel.  # noqa: E501


        :return: The time_sheet_entry_id of this UpdateTimesheetModel.  # noqa: E501
        :rtype: int
        """
        return self._time_sheet_entry_id

    @time_sheet_entry_id.setter
    def time_sheet_entry_id(self, time_sheet_entry_id):
        """Sets the time_sheet_entry_id of this UpdateTimesheetModel.


        :param time_sheet_entry_id: The time_sheet_entry_id of this UpdateTimesheetModel.  # noqa: E501
        :type: int
        """
        if time_sheet_entry_id is None:
            raise ValueError("Invalid value for `time_sheet_entry_id`, must not be `None`")  # noqa: E501

        self._time_sheet_entry_id = time_sheet_entry_id

    @property
    def fields_to_update(self):
        """Gets the fields_to_update of this UpdateTimesheetModel.  # noqa: E501


        :return: The fields_to_update of this UpdateTimesheetModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_to_update

    @fields_to_update.setter
    def fields_to_update(self, fields_to_update):
        """Sets the fields_to_update of this UpdateTimesheetModel.


        :param fields_to_update: The fields_to_update of this UpdateTimesheetModel.  # noqa: E501
        :type: list[str]
        """
        if fields_to_update is None:
            raise ValueError("Invalid value for `fields_to_update`, must not be `None`")  # noqa: E501

        self._fields_to_update = fields_to_update

    @property
    def project_idfk(self):
        """Gets the project_idfk of this UpdateTimesheetModel.  # noqa: E501


        :return: The project_idfk of this UpdateTimesheetModel.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this UpdateTimesheetModel.


        :param project_idfk: The project_idfk of this UpdateTimesheetModel.  # noqa: E501
        :type: int
        """
        if project_idfk is None:
            raise ValueError("Invalid value for `project_idfk`, must not be `None`")  # noqa: E501

        self._project_idfk = project_idfk

    @property
    def time_sheet_category_idfk(self):
        """Gets the time_sheet_category_idfk of this UpdateTimesheetModel.  # noqa: E501


        :return: The time_sheet_category_idfk of this UpdateTimesheetModel.  # noqa: E501
        :rtype: int
        """
        return self._time_sheet_category_idfk

    @time_sheet_category_idfk.setter
    def time_sheet_category_idfk(self, time_sheet_category_idfk):
        """Sets the time_sheet_category_idfk of this UpdateTimesheetModel.


        :param time_sheet_category_idfk: The time_sheet_category_idfk of this UpdateTimesheetModel.  # noqa: E501
        :type: int
        """

        self._time_sheet_category_idfk = time_sheet_category_idfk

    @property
    def task_idfk(self):
        """Gets the task_idfk of this UpdateTimesheetModel.  # noqa: E501


        :return: The task_idfk of this UpdateTimesheetModel.  # noqa: E501
        :rtype: int
        """
        return self._task_idfk

    @task_idfk.setter
    def task_idfk(self, task_idfk):
        """Sets the task_idfk of this UpdateTimesheetModel.


        :param task_idfk: The task_idfk of this UpdateTimesheetModel.  # noqa: E501
        :type: int
        """

        self._task_idfk = task_idfk

    @property
    def duration(self):
        """Gets the duration of this UpdateTimesheetModel.  # noqa: E501


        :return: The duration of this UpdateTimesheetModel.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this UpdateTimesheetModel.


        :param duration: The duration of this UpdateTimesheetModel.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def entry_date(self):
        """Gets the entry_date of this UpdateTimesheetModel.  # noqa: E501


        :return: The entry_date of this UpdateTimesheetModel.  # noqa: E501
        :rtype: datetime
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this UpdateTimesheetModel.


        :param entry_date: The entry_date of this UpdateTimesheetModel.  # noqa: E501
        :type: datetime
        """

        self._entry_date = entry_date

    @property
    def notes(self):
        """Gets the notes of this UpdateTimesheetModel.  # noqa: E501


        :return: The notes of this UpdateTimesheetModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateTimesheetModel.


        :param notes: The notes of this UpdateTimesheetModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def has_start_end_time(self):
        """Gets the has_start_end_time of this UpdateTimesheetModel.  # noqa: E501


        :return: The has_start_end_time of this UpdateTimesheetModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_start_end_time

    @has_start_end_time.setter
    def has_start_end_time(self, has_start_end_time):
        """Sets the has_start_end_time of this UpdateTimesheetModel.


        :param has_start_end_time: The has_start_end_time of this UpdateTimesheetModel.  # noqa: E501
        :type: bool
        """

        self._has_start_end_time = has_start_end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTimesheetModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
