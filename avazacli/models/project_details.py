# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avazacli.models.project_member_details import ProjectMemberDetails  # noqa: F401,E501
from avazacli.models.project_section_details import ProjectSectionDetails  # noqa: F401,E501
from avazacli.models.project_tag_item import ProjectTagItem  # noqa: F401,E501


class ProjectDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'title': 'str',
        'notes': 'str',
        'company_name': 'str',
        'company_idfk': 'int',
        'project_status_code': 'str',
        'is_archived': 'bool',
        'project_billable_type_code': 'str',
        'project_budget_type_code': 'str',
        'budget_amount': 'float',
        'budget_hours': 'float',
        'project_hourly_rate': 'float',
        'project_category_idfk': 'int',
        'project_category_name': 'str',
        'is_task_required_on_timesheet': 'bool',
        'project_category_color': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'sections': 'list[ProjectSectionDetails]',
        'members': 'list[ProjectMemberDetails]',
        'project_tags': 'list[ProjectTagItem]',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'project_id': 'ProjectID',
        'title': 'Title',
        'notes': 'Notes',
        'company_name': 'CompanyName',
        'company_idfk': 'CompanyIDFK',
        'project_status_code': 'ProjectStatusCode',
        'is_archived': 'isArchived',
        'project_billable_type_code': 'ProjectBillableTypeCode',
        'project_budget_type_code': 'ProjectBudgetTypeCode',
        'budget_amount': 'BudgetAmount',
        'budget_hours': 'BudgetHours',
        'project_hourly_rate': 'ProjectHourlyRate',
        'project_category_idfk': 'ProjectCategoryIDFK',
        'project_category_name': 'ProjectCategoryName',
        'is_task_required_on_timesheet': 'isTaskRequiredOnTimesheet',
        'project_category_color': 'ProjectCategoryColor',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'sections': 'Sections',
        'members': 'Members',
        'project_tags': 'ProjectTags',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, project_id=None, title=None, notes=None, company_name=None, company_idfk=None, project_status_code=None, is_archived=None, project_billable_type_code=None, project_budget_type_code=None, budget_amount=None, budget_hours=None, project_hourly_rate=None, project_category_idfk=None, project_category_name=None, is_task_required_on_timesheet=None, project_category_color=None, start_date=None, end_date=None, sections=None, members=None, project_tags=None, date_created=None, date_updated=None):  # noqa: E501
        """ProjectDetails - a model defined in Swagger"""  # noqa: E501

        self._project_id = None
        self._title = None
        self._notes = None
        self._company_name = None
        self._company_idfk = None
        self._project_status_code = None
        self._is_archived = None
        self._project_billable_type_code = None
        self._project_budget_type_code = None
        self._budget_amount = None
        self._budget_hours = None
        self._project_hourly_rate = None
        self._project_category_idfk = None
        self._project_category_name = None
        self._is_task_required_on_timesheet = None
        self._project_category_color = None
        self._start_date = None
        self._end_date = None
        self._sections = None
        self._members = None
        self._project_tags = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if title is not None:
            self.title = title
        if notes is not None:
            self.notes = notes
        if company_name is not None:
            self.company_name = company_name
        if company_idfk is not None:
            self.company_idfk = company_idfk
        if project_status_code is not None:
            self.project_status_code = project_status_code
        if is_archived is not None:
            self.is_archived = is_archived
        if project_billable_type_code is not None:
            self.project_billable_type_code = project_billable_type_code
        if project_budget_type_code is not None:
            self.project_budget_type_code = project_budget_type_code
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_hours is not None:
            self.budget_hours = budget_hours
        if project_hourly_rate is not None:
            self.project_hourly_rate = project_hourly_rate
        if project_category_idfk is not None:
            self.project_category_idfk = project_category_idfk
        if project_category_name is not None:
            self.project_category_name = project_category_name
        if is_task_required_on_timesheet is not None:
            self.is_task_required_on_timesheet = is_task_required_on_timesheet
        if project_category_color is not None:
            self.project_category_color = project_category_color
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if sections is not None:
            self.sections = sections
        if members is not None:
            self.members = members
        if project_tags is not None:
            self.project_tags = project_tags
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def project_id(self):
        """Gets the project_id of this ProjectDetails.  # noqa: E501


        :return: The project_id of this ProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectDetails.


        :param project_id: The project_id of this ProjectDetails.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def title(self):
        """Gets the title of this ProjectDetails.  # noqa: E501


        :return: The title of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectDetails.


        :param title: The title of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def notes(self):
        """Gets the notes of this ProjectDetails.  # noqa: E501


        :return: The notes of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProjectDetails.


        :param notes: The notes of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def company_name(self):
        """Gets the company_name of this ProjectDetails.  # noqa: E501


        :return: The company_name of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ProjectDetails.


        :param company_name: The company_name of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_idfk(self):
        """Gets the company_idfk of this ProjectDetails.  # noqa: E501


        :return: The company_idfk of this ProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this ProjectDetails.


        :param company_idfk: The company_idfk of this ProjectDetails.  # noqa: E501
        :type: int
        """

        self._company_idfk = company_idfk

    @property
    def project_status_code(self):
        """Gets the project_status_code of this ProjectDetails.  # noqa: E501

        Possible values: NotStarted, InProgress, Complete  # noqa: E501

        :return: The project_status_code of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_status_code

    @project_status_code.setter
    def project_status_code(self, project_status_code):
        """Sets the project_status_code of this ProjectDetails.

        Possible values: NotStarted, InProgress, Complete  # noqa: E501

        :param project_status_code: The project_status_code of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._project_status_code = project_status_code

    @property
    def is_archived(self):
        """Gets the is_archived of this ProjectDetails.  # noqa: E501


        :return: The is_archived of this ProjectDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ProjectDetails.


        :param is_archived: The is_archived of this ProjectDetails.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def project_billable_type_code(self):
        """Gets the project_billable_type_code of this ProjectDetails.  # noqa: E501

        Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly  # noqa: E501

        :return: The project_billable_type_code of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_billable_type_code

    @project_billable_type_code.setter
    def project_billable_type_code(self, project_billable_type_code):
        """Sets the project_billable_type_code of this ProjectDetails.

        Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly  # noqa: E501

        :param project_billable_type_code: The project_billable_type_code of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._project_billable_type_code = project_billable_type_code

    @property
    def project_budget_type_code(self):
        """Gets the project_budget_type_code of this ProjectDetails.  # noqa: E501

        Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours  # noqa: E501

        :return: The project_budget_type_code of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_budget_type_code

    @project_budget_type_code.setter
    def project_budget_type_code(self, project_budget_type_code):
        """Sets the project_budget_type_code of this ProjectDetails.

        Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours  # noqa: E501

        :param project_budget_type_code: The project_budget_type_code of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._project_budget_type_code = project_budget_type_code

    @property
    def budget_amount(self):
        """Gets the budget_amount of this ProjectDetails.  # noqa: E501


        :return: The budget_amount of this ProjectDetails.  # noqa: E501
        :rtype: float
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this ProjectDetails.


        :param budget_amount: The budget_amount of this ProjectDetails.  # noqa: E501
        :type: float
        """

        self._budget_amount = budget_amount

    @property
    def budget_hours(self):
        """Gets the budget_hours of this ProjectDetails.  # noqa: E501


        :return: The budget_hours of this ProjectDetails.  # noqa: E501
        :rtype: float
        """
        return self._budget_hours

    @budget_hours.setter
    def budget_hours(self, budget_hours):
        """Sets the budget_hours of this ProjectDetails.


        :param budget_hours: The budget_hours of this ProjectDetails.  # noqa: E501
        :type: float
        """

        self._budget_hours = budget_hours

    @property
    def project_hourly_rate(self):
        """Gets the project_hourly_rate of this ProjectDetails.  # noqa: E501


        :return: The project_hourly_rate of this ProjectDetails.  # noqa: E501
        :rtype: float
        """
        return self._project_hourly_rate

    @project_hourly_rate.setter
    def project_hourly_rate(self, project_hourly_rate):
        """Sets the project_hourly_rate of this ProjectDetails.


        :param project_hourly_rate: The project_hourly_rate of this ProjectDetails.  # noqa: E501
        :type: float
        """

        self._project_hourly_rate = project_hourly_rate

    @property
    def project_category_idfk(self):
        """Gets the project_category_idfk of this ProjectDetails.  # noqa: E501


        :return: The project_category_idfk of this ProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._project_category_idfk

    @project_category_idfk.setter
    def project_category_idfk(self, project_category_idfk):
        """Sets the project_category_idfk of this ProjectDetails.


        :param project_category_idfk: The project_category_idfk of this ProjectDetails.  # noqa: E501
        :type: int
        """

        self._project_category_idfk = project_category_idfk

    @property
    def project_category_name(self):
        """Gets the project_category_name of this ProjectDetails.  # noqa: E501


        :return: The project_category_name of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_category_name

    @project_category_name.setter
    def project_category_name(self, project_category_name):
        """Sets the project_category_name of this ProjectDetails.


        :param project_category_name: The project_category_name of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._project_category_name = project_category_name

    @property
    def is_task_required_on_timesheet(self):
        """Gets the is_task_required_on_timesheet of this ProjectDetails.  # noqa: E501


        :return: The is_task_required_on_timesheet of this ProjectDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_task_required_on_timesheet

    @is_task_required_on_timesheet.setter
    def is_task_required_on_timesheet(self, is_task_required_on_timesheet):
        """Sets the is_task_required_on_timesheet of this ProjectDetails.


        :param is_task_required_on_timesheet: The is_task_required_on_timesheet of this ProjectDetails.  # noqa: E501
        :type: bool
        """

        self._is_task_required_on_timesheet = is_task_required_on_timesheet

    @property
    def project_category_color(self):
        """Gets the project_category_color of this ProjectDetails.  # noqa: E501

        Html Hex Color Code starting with #  # noqa: E501

        :return: The project_category_color of this ProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_category_color

    @project_category_color.setter
    def project_category_color(self, project_category_color):
        """Sets the project_category_color of this ProjectDetails.

        Html Hex Color Code starting with #  # noqa: E501

        :param project_category_color: The project_category_color of this ProjectDetails.  # noqa: E501
        :type: str
        """

        self._project_category_color = project_category_color

    @property
    def start_date(self):
        """Gets the start_date of this ProjectDetails.  # noqa: E501


        :return: The start_date of this ProjectDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ProjectDetails.


        :param start_date: The start_date of this ProjectDetails.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ProjectDetails.  # noqa: E501


        :return: The end_date of this ProjectDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ProjectDetails.


        :param end_date: The end_date of this ProjectDetails.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def sections(self):
        """Gets the sections of this ProjectDetails.  # noqa: E501


        :return: The sections of this ProjectDetails.  # noqa: E501
        :rtype: list[ProjectSectionDetails]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this ProjectDetails.


        :param sections: The sections of this ProjectDetails.  # noqa: E501
        :type: list[ProjectSectionDetails]
        """

        self._sections = sections

    @property
    def members(self):
        """Gets the members of this ProjectDetails.  # noqa: E501


        :return: The members of this ProjectDetails.  # noqa: E501
        :rtype: list[ProjectMemberDetails]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ProjectDetails.


        :param members: The members of this ProjectDetails.  # noqa: E501
        :type: list[ProjectMemberDetails]
        """

        self._members = members

    @property
    def project_tags(self):
        """Gets the project_tags of this ProjectDetails.  # noqa: E501


        :return: The project_tags of this ProjectDetails.  # noqa: E501
        :rtype: list[ProjectTagItem]
        """
        return self._project_tags

    @project_tags.setter
    def project_tags(self, project_tags):
        """Sets the project_tags of this ProjectDetails.


        :param project_tags: The project_tags of this ProjectDetails.  # noqa: E501
        :type: list[ProjectTagItem]
        """

        self._project_tags = project_tags

    @property
    def date_created(self):
        """Gets the date_created of this ProjectDetails.  # noqa: E501


        :return: The date_created of this ProjectDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ProjectDetails.


        :param date_created: The date_created of this ProjectDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ProjectDetails.  # noqa: E501


        :return: The date_updated of this ProjectDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ProjectDetails.


        :param date_updated: The date_updated of this ProjectDetails.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
