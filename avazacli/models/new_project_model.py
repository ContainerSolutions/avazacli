# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewProjectModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_idfk': 'int',
        'company_name': 'str',
        'currency_code': 'str',
        'project_title': 'str',
        'project_notes': 'str',
        'timesheet_approval_requiredby_default': 'bool',
        'populate_default_project_members': 'bool',
        'is_task_required_on_timesheet': 'bool',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'budget_amount': 'float',
        'budget_hours': 'float',
        'project_status_code': 'str',
        'project_category_idfk': 'int'
    }

    attribute_map = {
        'company_idfk': 'CompanyIDFK',
        'company_name': 'CompanyName',
        'currency_code': 'CurrencyCode',
        'project_title': 'ProjectTitle',
        'project_notes': 'ProjectNotes',
        'timesheet_approval_requiredby_default': 'TimesheetApprovalRequiredbyDefault',
        'populate_default_project_members': 'PopulateDefaultProjectMembers',
        'is_task_required_on_timesheet': 'isTaskRequiredOnTimesheet',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'budget_amount': 'BudgetAmount',
        'budget_hours': 'BudgetHours',
        'project_status_code': 'ProjectStatusCode',
        'project_category_idfk': 'ProjectCategoryIDFK'
    }

    def __init__(self, company_idfk=None, company_name=None, currency_code=None, project_title=None, project_notes=None, timesheet_approval_requiredby_default=None, populate_default_project_members=None, is_task_required_on_timesheet=None, start_date=None, end_date=None, budget_amount=None, budget_hours=None, project_status_code=None, project_category_idfk=None):  # noqa: E501
        """NewProjectModel - a model defined in Swagger"""  # noqa: E501

        self._company_idfk = None
        self._company_name = None
        self._currency_code = None
        self._project_title = None
        self._project_notes = None
        self._timesheet_approval_requiredby_default = None
        self._populate_default_project_members = None
        self._is_task_required_on_timesheet = None
        self._start_date = None
        self._end_date = None
        self._budget_amount = None
        self._budget_hours = None
        self._project_status_code = None
        self._project_category_idfk = None
        self.discriminator = None

        if company_idfk is not None:
            self.company_idfk = company_idfk
        if company_name is not None:
            self.company_name = company_name
        if currency_code is not None:
            self.currency_code = currency_code
        self.project_title = project_title
        if project_notes is not None:
            self.project_notes = project_notes
        if timesheet_approval_requiredby_default is not None:
            self.timesheet_approval_requiredby_default = timesheet_approval_requiredby_default
        if populate_default_project_members is not None:
            self.populate_default_project_members = populate_default_project_members
        if is_task_required_on_timesheet is not None:
            self.is_task_required_on_timesheet = is_task_required_on_timesheet
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if budget_amount is not None:
            self.budget_amount = budget_amount
        if budget_hours is not None:
            self.budget_hours = budget_hours
        if project_status_code is not None:
            self.project_status_code = project_status_code
        if project_category_idfk is not None:
            self.project_category_idfk = project_category_idfk

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewProjectModel.  # noqa: E501

        An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName  # noqa: E501

        :return: The company_idfk of this NewProjectModel.  # noqa: E501
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewProjectModel.

        An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName  # noqa: E501

        :param company_idfk: The company_idfk of this NewProjectModel.  # noqa: E501
        :type: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this NewProjectModel.  # noqa: E501

        The name for a Company to create the project under. Will create company unless it matches an existing company name  # noqa: E501

        :return: The company_name of this NewProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this NewProjectModel.

        The name for a Company to create the project under. Will create company unless it matches an existing company name  # noqa: E501

        :param company_name: The company_name of this NewProjectModel.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def currency_code(self):
        """Gets the currency_code of this NewProjectModel.  # noqa: E501

        The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.  # noqa: E501

        :return: The currency_code of this NewProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewProjectModel.

        The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.  # noqa: E501

        :param currency_code: The currency_code of this NewProjectModel.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def project_title(self):
        """Gets the project_title of this NewProjectModel.  # noqa: E501

        The title of the new project. (255 characters max)  # noqa: E501

        :return: The project_title of this NewProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this NewProjectModel.

        The title of the new project. (255 characters max)  # noqa: E501

        :param project_title: The project_title of this NewProjectModel.  # noqa: E501
        :type: str
        """
        if project_title is None:
            raise ValueError("Invalid value for `project_title`, must not be `None`")  # noqa: E501

        self._project_title = project_title

    @property
    def project_notes(self):
        """Gets the project_notes of this NewProjectModel.  # noqa: E501

        Any descriptive notes about the project. (2000 characters max)  # noqa: E501

        :return: The project_notes of this NewProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._project_notes

    @project_notes.setter
    def project_notes(self, project_notes):
        """Sets the project_notes of this NewProjectModel.

        Any descriptive notes about the project. (2000 characters max)  # noqa: E501

        :param project_notes: The project_notes of this NewProjectModel.  # noqa: E501
        :type: str
        """

        self._project_notes = project_notes

    @property
    def timesheet_approval_requiredby_default(self):
        """Gets the timesheet_approval_requiredby_default of this NewProjectModel.  # noqa: E501


        :return: The timesheet_approval_requiredby_default of this NewProjectModel.  # noqa: E501
        :rtype: bool
        """
        return self._timesheet_approval_requiredby_default

    @timesheet_approval_requiredby_default.setter
    def timesheet_approval_requiredby_default(self, timesheet_approval_requiredby_default):
        """Sets the timesheet_approval_requiredby_default of this NewProjectModel.


        :param timesheet_approval_requiredby_default: The timesheet_approval_requiredby_default of this NewProjectModel.  # noqa: E501
        :type: bool
        """

        self._timesheet_approval_requiredby_default = timesheet_approval_requiredby_default

    @property
    def populate_default_project_members(self):
        """Gets the populate_default_project_members of this NewProjectModel.  # noqa: E501


        :return: The populate_default_project_members of this NewProjectModel.  # noqa: E501
        :rtype: bool
        """
        return self._populate_default_project_members

    @populate_default_project_members.setter
    def populate_default_project_members(self, populate_default_project_members):
        """Sets the populate_default_project_members of this NewProjectModel.


        :param populate_default_project_members: The populate_default_project_members of this NewProjectModel.  # noqa: E501
        :type: bool
        """

        self._populate_default_project_members = populate_default_project_members

    @property
    def is_task_required_on_timesheet(self):
        """Gets the is_task_required_on_timesheet of this NewProjectModel.  # noqa: E501


        :return: The is_task_required_on_timesheet of this NewProjectModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_task_required_on_timesheet

    @is_task_required_on_timesheet.setter
    def is_task_required_on_timesheet(self, is_task_required_on_timesheet):
        """Sets the is_task_required_on_timesheet of this NewProjectModel.


        :param is_task_required_on_timesheet: The is_task_required_on_timesheet of this NewProjectModel.  # noqa: E501
        :type: bool
        """

        self._is_task_required_on_timesheet = is_task_required_on_timesheet

    @property
    def start_date(self):
        """Gets the start_date of this NewProjectModel.  # noqa: E501


        :return: The start_date of this NewProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this NewProjectModel.


        :param start_date: The start_date of this NewProjectModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this NewProjectModel.  # noqa: E501


        :return: The end_date of this NewProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this NewProjectModel.


        :param end_date: The end_date of this NewProjectModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def budget_amount(self):
        """Gets the budget_amount of this NewProjectModel.  # noqa: E501


        :return: The budget_amount of this NewProjectModel.  # noqa: E501
        :rtype: float
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this NewProjectModel.


        :param budget_amount: The budget_amount of this NewProjectModel.  # noqa: E501
        :type: float
        """

        self._budget_amount = budget_amount

    @property
    def budget_hours(self):
        """Gets the budget_hours of this NewProjectModel.  # noqa: E501


        :return: The budget_hours of this NewProjectModel.  # noqa: E501
        :rtype: float
        """
        return self._budget_hours

    @budget_hours.setter
    def budget_hours(self, budget_hours):
        """Sets the budget_hours of this NewProjectModel.


        :param budget_hours: The budget_hours of this NewProjectModel.  # noqa: E501
        :type: float
        """

        self._budget_hours = budget_hours

    @property
    def project_status_code(self):
        """Gets the project_status_code of this NewProjectModel.  # noqa: E501


        :return: The project_status_code of this NewProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._project_status_code

    @project_status_code.setter
    def project_status_code(self, project_status_code):
        """Sets the project_status_code of this NewProjectModel.


        :param project_status_code: The project_status_code of this NewProjectModel.  # noqa: E501
        :type: str
        """

        self._project_status_code = project_status_code

    @property
    def project_category_idfk(self):
        """Gets the project_category_idfk of this NewProjectModel.  # noqa: E501


        :return: The project_category_idfk of this NewProjectModel.  # noqa: E501
        :rtype: int
        """
        return self._project_category_idfk

    @project_category_idfk.setter
    def project_category_idfk(self, project_category_idfk):
        """Sets the project_category_idfk of this NewProjectModel.


        :param project_category_idfk: The project_category_idfk of this NewProjectModel.  # noqa: E501
        :type: int
        """

        self._project_category_idfk = project_category_idfk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewProjectModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
