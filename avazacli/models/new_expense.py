# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewExpense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expense_date': 'datetime',
        'user_idfk': 'int',
        'user_email': 'str',
        'expense_category_idfk': 'int',
        'expense_category_name': 'str',
        'is_chargeable': 'bool',
        'is_reimbursable': 'bool',
        'customer_idfk': 'int',
        'customer_name': 'str',
        'project_idfk': 'int',
        'project_name': 'str',
        'currency_code': 'str',
        'exchange_rate': 'float',
        'amount': 'float',
        'tax_idfk': 'int',
        'tax_name': 'str',
        'transaction_tax_config_code': 'str',
        'group_trip_name': 'str',
        'merchant': 'str',
        'merchant_tax_numer': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'expense_date': 'ExpenseDate',
        'user_idfk': 'UserIDFK',
        'user_email': 'UserEmail',
        'expense_category_idfk': 'ExpenseCategoryIDFK',
        'expense_category_name': 'ExpenseCategoryName',
        'is_chargeable': 'isChargeable',
        'is_reimbursable': 'isReimbursable',
        'customer_idfk': 'CustomerIDFK',
        'customer_name': 'CustomerName',
        'project_idfk': 'ProjectIDFK',
        'project_name': 'ProjectName',
        'currency_code': 'CurrencyCode',
        'exchange_rate': 'ExchangeRate',
        'amount': 'Amount',
        'tax_idfk': 'TaxIDFK',
        'tax_name': 'TaxName',
        'transaction_tax_config_code': 'TransactionTaxConfigCode',
        'group_trip_name': 'GroupTripName',
        'merchant': 'Merchant',
        'merchant_tax_numer': 'MerchantTaxNumer',
        'notes': 'Notes'
    }

    def __init__(self, expense_date=None, user_idfk=None, user_email=None, expense_category_idfk=None, expense_category_name=None, is_chargeable=None, is_reimbursable=None, customer_idfk=None, customer_name=None, project_idfk=None, project_name=None, currency_code=None, exchange_rate=None, amount=None, tax_idfk=None, tax_name=None, transaction_tax_config_code=None, group_trip_name=None, merchant=None, merchant_tax_numer=None, notes=None):  # noqa: E501
        """NewExpense - a model defined in Swagger"""  # noqa: E501

        self._expense_date = None
        self._user_idfk = None
        self._user_email = None
        self._expense_category_idfk = None
        self._expense_category_name = None
        self._is_chargeable = None
        self._is_reimbursable = None
        self._customer_idfk = None
        self._customer_name = None
        self._project_idfk = None
        self._project_name = None
        self._currency_code = None
        self._exchange_rate = None
        self._amount = None
        self._tax_idfk = None
        self._tax_name = None
        self._transaction_tax_config_code = None
        self._group_trip_name = None
        self._merchant = None
        self._merchant_tax_numer = None
        self._notes = None
        self.discriminator = None

        if expense_date is not None:
            self.expense_date = expense_date
        if user_idfk is not None:
            self.user_idfk = user_idfk
        if user_email is not None:
            self.user_email = user_email
        if expense_category_idfk is not None:
            self.expense_category_idfk = expense_category_idfk
        if expense_category_name is not None:
            self.expense_category_name = expense_category_name
        if is_chargeable is not None:
            self.is_chargeable = is_chargeable
        if is_reimbursable is not None:
            self.is_reimbursable = is_reimbursable
        if customer_idfk is not None:
            self.customer_idfk = customer_idfk
        if customer_name is not None:
            self.customer_name = customer_name
        if project_idfk is not None:
            self.project_idfk = project_idfk
        if project_name is not None:
            self.project_name = project_name
        if currency_code is not None:
            self.currency_code = currency_code
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if amount is not None:
            self.amount = amount
        if tax_idfk is not None:
            self.tax_idfk = tax_idfk
        if tax_name is not None:
            self.tax_name = tax_name
        if transaction_tax_config_code is not None:
            self.transaction_tax_config_code = transaction_tax_config_code
        if group_trip_name is not None:
            self.group_trip_name = group_trip_name
        if merchant is not None:
            self.merchant = merchant
        if merchant_tax_numer is not None:
            self.merchant_tax_numer = merchant_tax_numer
        if notes is not None:
            self.notes = notes

    @property
    def expense_date(self):
        """Gets the expense_date of this NewExpense.  # noqa: E501

        The date of the expense entry (Required)  # noqa: E501

        :return: The expense_date of this NewExpense.  # noqa: E501
        :rtype: datetime
        """
        return self._expense_date

    @expense_date.setter
    def expense_date(self, expense_date):
        """Sets the expense_date of this NewExpense.

        The date of the expense entry (Required)  # noqa: E501

        :param expense_date: The expense_date of this NewExpense.  # noqa: E501
        :type: datetime
        """

        self._expense_date = expense_date

    @property
    def user_idfk(self):
        """Gets the user_idfk of this NewExpense.  # noqa: E501

        UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided  # noqa: E501

        :return: The user_idfk of this NewExpense.  # noqa: E501
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this NewExpense.

        UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided  # noqa: E501

        :param user_idfk: The user_idfk of this NewExpense.  # noqa: E501
        :type: int
        """

        self._user_idfk = user_idfk

    @property
    def user_email(self):
        """Gets the user_email of this NewExpense.  # noqa: E501

        The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.  # noqa: E501

        :return: The user_email of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this NewExpense.

        The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.  # noqa: E501

        :param user_email: The user_email of this NewExpense.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def expense_category_idfk(self):
        """Gets the expense_category_idfk of this NewExpense.  # noqa: E501

        The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided  # noqa: E501

        :return: The expense_category_idfk of this NewExpense.  # noqa: E501
        :rtype: int
        """
        return self._expense_category_idfk

    @expense_category_idfk.setter
    def expense_category_idfk(self, expense_category_idfk):
        """Sets the expense_category_idfk of this NewExpense.

        The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided  # noqa: E501

        :param expense_category_idfk: The expense_category_idfk of this NewExpense.  # noqa: E501
        :type: int
        """

        self._expense_category_idfk = expense_category_idfk

    @property
    def expense_category_name(self):
        """Gets the expense_category_name of this NewExpense.  # noqa: E501

        Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.  # noqa: E501

        :return: The expense_category_name of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._expense_category_name

    @expense_category_name.setter
    def expense_category_name(self, expense_category_name):
        """Sets the expense_category_name of this NewExpense.

        Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.  # noqa: E501

        :param expense_category_name: The expense_category_name of this NewExpense.  # noqa: E501
        :type: str
        """

        self._expense_category_name = expense_category_name

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this NewExpense.  # noqa: E501

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.  # noqa: E501

        :return: The is_chargeable of this NewExpense.  # noqa: E501
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this NewExpense.

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.  # noqa: E501

        :param is_chargeable: The is_chargeable of this NewExpense.  # noqa: E501
        :type: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def is_reimbursable(self):
        """Gets the is_reimbursable of this NewExpense.  # noqa: E501

        Defaults to false if not provided.  # noqa: E501

        :return: The is_reimbursable of this NewExpense.  # noqa: E501
        :rtype: bool
        """
        return self._is_reimbursable

    @is_reimbursable.setter
    def is_reimbursable(self, is_reimbursable):
        """Sets the is_reimbursable of this NewExpense.

        Defaults to false if not provided.  # noqa: E501

        :param is_reimbursable: The is_reimbursable of this NewExpense.  # noqa: E501
        :type: bool
        """

        self._is_reimbursable = is_reimbursable

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this NewExpense.  # noqa: E501

        The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.  # noqa: E501

        :return: The customer_idfk of this NewExpense.  # noqa: E501
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this NewExpense.

        The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.  # noqa: E501

        :param customer_idfk: The customer_idfk of this NewExpense.  # noqa: E501
        :type: int
        """

        self._customer_idfk = customer_idfk

    @property
    def customer_name(self):
        """Gets the customer_name of this NewExpense.  # noqa: E501

        The name of an existing customer in Avaza. Must be an exact (case insensitive) match.  # noqa: E501

        :return: The customer_name of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this NewExpense.

        The name of an existing customer in Avaza. Must be an exact (case insensitive) match.  # noqa: E501

        :param customer_name: The customer_name of this NewExpense.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewExpense.  # noqa: E501

        The Avaza project ID to associate the Expense with.  # noqa: E501

        :return: The project_idfk of this NewExpense.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewExpense.

        The Avaza project ID to associate the Expense with.  # noqa: E501

        :param project_idfk: The project_idfk of this NewExpense.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    @property
    def project_name(self):
        """Gets the project_name of this NewExpense.  # noqa: E501

        Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.  # noqa: E501

        :return: The project_name of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this NewExpense.

        Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.  # noqa: E501

        :param project_name: The project_name of this NewExpense.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def currency_code(self):
        """Gets the currency_code of this NewExpense.  # noqa: E501

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.  # noqa: E501

        :return: The currency_code of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewExpense.

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.  # noqa: E501

        :param currency_code: The currency_code of this NewExpense.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewExpense.  # noqa: E501

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)  # noqa: E501

        :return: The exchange_rate of this NewExpense.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewExpense.

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)  # noqa: E501

        :param exchange_rate: The exchange_rate of this NewExpense.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def amount(self):
        """Gets the amount of this NewExpense.  # noqa: E501

        Expense Amount (Required). Must be &gt;= 0  # noqa: E501

        :return: The amount of this NewExpense.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewExpense.

        Expense Amount (Required). Must be &gt;= 0  # noqa: E501

        :param amount: The amount of this NewExpense.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this NewExpense.  # noqa: E501

        Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.  # noqa: E501

        :return: The tax_idfk of this NewExpense.  # noqa: E501
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this NewExpense.

        Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.  # noqa: E501

        :param tax_idfk: The tax_idfk of this NewExpense.  # noqa: E501
        :type: int
        """

        self._tax_idfk = tax_idfk

    @property
    def tax_name(self):
        """Gets the tax_name of this NewExpense.  # noqa: E501

        Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.  # noqa: E501

        :return: The tax_name of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this NewExpense.

        Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.  # noqa: E501

        :param tax_name: The tax_name of this NewExpense.  # noqa: E501
        :type: str
        """

        self._tax_name = tax_name

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this NewExpense.  # noqa: E501

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.  # noqa: E501

        :return: The transaction_tax_config_code of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this NewExpense.

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.  # noqa: E501

        :param transaction_tax_config_code: The transaction_tax_config_code of this NewExpense.  # noqa: E501
        :type: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code

    @property
    def group_trip_name(self):
        """Gets the group_trip_name of this NewExpense.  # noqa: E501

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.  # noqa: E501

        :return: The group_trip_name of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._group_trip_name

    @group_trip_name.setter
    def group_trip_name(self, group_trip_name):
        """Sets the group_trip_name of this NewExpense.

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.  # noqa: E501

        :param group_trip_name: The group_trip_name of this NewExpense.  # noqa: E501
        :type: str
        """

        self._group_trip_name = group_trip_name

    @property
    def merchant(self):
        """Gets the merchant of this NewExpense.  # noqa: E501

        The name of the merchant.  # noqa: E501

        :return: The merchant of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this NewExpense.

        The name of the merchant.  # noqa: E501

        :param merchant: The merchant of this NewExpense.  # noqa: E501
        :type: str
        """

        self._merchant = merchant

    @property
    def merchant_tax_numer(self):
        """Gets the merchant_tax_numer of this NewExpense.  # noqa: E501

        A Tax number identifier for the merchant.  # noqa: E501

        :return: The merchant_tax_numer of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._merchant_tax_numer

    @merchant_tax_numer.setter
    def merchant_tax_numer(self, merchant_tax_numer):
        """Sets the merchant_tax_numer of this NewExpense.

        A Tax number identifier for the merchant.  # noqa: E501

        :param merchant_tax_numer: The merchant_tax_numer of this NewExpense.  # noqa: E501
        :type: str
        """

        self._merchant_tax_numer = merchant_tax_numer

    @property
    def notes(self):
        """Gets the notes of this NewExpense.  # noqa: E501

        Expense Notes  # noqa: E501

        :return: The notes of this NewExpense.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewExpense.

        Expense Notes  # noqa: E501

        :param notes: The notes of this NewExpense.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewExpense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
