# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avazacli.models.tag_item import TagItem  # noqa: F401,E501


class TaskDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'int',
        'project_idfk': 'int',
        'project_title': 'str',
        'section_title': 'str',
        'section_idfk': 'int',
        'title': 'str',
        'description': 'str',
        'description_no_html': 'str',
        'assigned_to_firstname': 'str',
        'assigned_to_lastname': 'str',
        'assigned_to_email': 'str',
        'assigned_to_user_idfk': 'str',
        'date_start': 'datetime',
        'date_start_utc': 'datetime',
        'date_due': 'datetime',
        'date_due_utc': 'datetime',
        'estimated_effort': 'float',
        'actual_time': 'float',
        'tags': 'list[TagItem]',
        'task_status_code': 'str',
        'percent_complete': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'task_id': 'TaskID',
        'project_idfk': 'ProjectIDFK',
        'project_title': 'ProjectTitle',
        'section_title': 'SectionTitle',
        'section_idfk': 'SectionIDFK',
        'title': 'Title',
        'description': 'Description',
        'description_no_html': 'DescriptionNoHTML',
        'assigned_to_firstname': 'AssignedToFirstname',
        'assigned_to_lastname': 'AssignedToLastname',
        'assigned_to_email': 'AssignedToEmail',
        'assigned_to_user_idfk': 'AssignedToUserIDFK',
        'date_start': 'DateStart',
        'date_start_utc': 'DateStartUTC',
        'date_due': 'DateDue',
        'date_due_utc': 'DateDueUTC',
        'estimated_effort': 'EstimatedEffort',
        'actual_time': 'ActualTime',
        'tags': 'Tags',
        'task_status_code': 'TaskStatusCode',
        'percent_complete': 'PercentComplete',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, task_id=None, project_idfk=None, project_title=None, section_title=None, section_idfk=None, title=None, description=None, description_no_html=None, assigned_to_firstname=None, assigned_to_lastname=None, assigned_to_email=None, assigned_to_user_idfk=None, date_start=None, date_start_utc=None, date_due=None, date_due_utc=None, estimated_effort=None, actual_time=None, tags=None, task_status_code=None, percent_complete=None, date_created=None, date_updated=None):  # noqa: E501
        """TaskDetails - a model defined in Swagger"""  # noqa: E501

        self._task_id = None
        self._project_idfk = None
        self._project_title = None
        self._section_title = None
        self._section_idfk = None
        self._title = None
        self._description = None
        self._description_no_html = None
        self._assigned_to_firstname = None
        self._assigned_to_lastname = None
        self._assigned_to_email = None
        self._assigned_to_user_idfk = None
        self._date_start = None
        self._date_start_utc = None
        self._date_due = None
        self._date_due_utc = None
        self._estimated_effort = None
        self._actual_time = None
        self._tags = None
        self._task_status_code = None
        self._percent_complete = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if project_idfk is not None:
            self.project_idfk = project_idfk
        if project_title is not None:
            self.project_title = project_title
        if section_title is not None:
            self.section_title = section_title
        if section_idfk is not None:
            self.section_idfk = section_idfk
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if description_no_html is not None:
            self.description_no_html = description_no_html
        if assigned_to_firstname is not None:
            self.assigned_to_firstname = assigned_to_firstname
        if assigned_to_lastname is not None:
            self.assigned_to_lastname = assigned_to_lastname
        if assigned_to_email is not None:
            self.assigned_to_email = assigned_to_email
        if assigned_to_user_idfk is not None:
            self.assigned_to_user_idfk = assigned_to_user_idfk
        if date_start is not None:
            self.date_start = date_start
        if date_start_utc is not None:
            self.date_start_utc = date_start_utc
        if date_due is not None:
            self.date_due = date_due
        if date_due_utc is not None:
            self.date_due_utc = date_due_utc
        if estimated_effort is not None:
            self.estimated_effort = estimated_effort
        if actual_time is not None:
            self.actual_time = actual_time
        if tags is not None:
            self.tags = tags
        if task_status_code is not None:
            self.task_status_code = task_status_code
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def task_id(self):
        """Gets the task_id of this TaskDetails.  # noqa: E501


        :return: The task_id of this TaskDetails.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskDetails.


        :param task_id: The task_id of this TaskDetails.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def project_idfk(self):
        """Gets the project_idfk of this TaskDetails.  # noqa: E501


        :return: The project_idfk of this TaskDetails.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this TaskDetails.


        :param project_idfk: The project_idfk of this TaskDetails.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    @property
    def project_title(self):
        """Gets the project_title of this TaskDetails.  # noqa: E501


        :return: The project_title of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this TaskDetails.


        :param project_title: The project_title of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._project_title = project_title

    @property
    def section_title(self):
        """Gets the section_title of this TaskDetails.  # noqa: E501


        :return: The section_title of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._section_title

    @section_title.setter
    def section_title(self, section_title):
        """Sets the section_title of this TaskDetails.


        :param section_title: The section_title of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._section_title = section_title

    @property
    def section_idfk(self):
        """Gets the section_idfk of this TaskDetails.  # noqa: E501


        :return: The section_idfk of this TaskDetails.  # noqa: E501
        :rtype: int
        """
        return self._section_idfk

    @section_idfk.setter
    def section_idfk(self, section_idfk):
        """Sets the section_idfk of this TaskDetails.


        :param section_idfk: The section_idfk of this TaskDetails.  # noqa: E501
        :type: int
        """

        self._section_idfk = section_idfk

    @property
    def title(self):
        """Gets the title of this TaskDetails.  # noqa: E501


        :return: The title of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TaskDetails.


        :param title: The title of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this TaskDetails.  # noqa: E501


        :return: The description of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskDetails.


        :param description: The description of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_no_html(self):
        """Gets the description_no_html of this TaskDetails.  # noqa: E501


        :return: The description_no_html of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._description_no_html

    @description_no_html.setter
    def description_no_html(self, description_no_html):
        """Sets the description_no_html of this TaskDetails.


        :param description_no_html: The description_no_html of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._description_no_html = description_no_html

    @property
    def assigned_to_firstname(self):
        """Gets the assigned_to_firstname of this TaskDetails.  # noqa: E501


        :return: The assigned_to_firstname of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_firstname

    @assigned_to_firstname.setter
    def assigned_to_firstname(self, assigned_to_firstname):
        """Sets the assigned_to_firstname of this TaskDetails.


        :param assigned_to_firstname: The assigned_to_firstname of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._assigned_to_firstname = assigned_to_firstname

    @property
    def assigned_to_lastname(self):
        """Gets the assigned_to_lastname of this TaskDetails.  # noqa: E501


        :return: The assigned_to_lastname of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_lastname

    @assigned_to_lastname.setter
    def assigned_to_lastname(self, assigned_to_lastname):
        """Sets the assigned_to_lastname of this TaskDetails.


        :param assigned_to_lastname: The assigned_to_lastname of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._assigned_to_lastname = assigned_to_lastname

    @property
    def assigned_to_email(self):
        """Gets the assigned_to_email of this TaskDetails.  # noqa: E501


        :return: The assigned_to_email of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_email

    @assigned_to_email.setter
    def assigned_to_email(self, assigned_to_email):
        """Sets the assigned_to_email of this TaskDetails.


        :param assigned_to_email: The assigned_to_email of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._assigned_to_email = assigned_to_email

    @property
    def assigned_to_user_idfk(self):
        """Gets the assigned_to_user_idfk of this TaskDetails.  # noqa: E501


        :return: The assigned_to_user_idfk of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_user_idfk

    @assigned_to_user_idfk.setter
    def assigned_to_user_idfk(self, assigned_to_user_idfk):
        """Sets the assigned_to_user_idfk of this TaskDetails.


        :param assigned_to_user_idfk: The assigned_to_user_idfk of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._assigned_to_user_idfk = assigned_to_user_idfk

    @property
    def date_start(self):
        """Gets the date_start of this TaskDetails.  # noqa: E501


        :return: The date_start of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this TaskDetails.


        :param date_start: The date_start of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_start_utc(self):
        """Gets the date_start_utc of this TaskDetails.  # noqa: E501


        :return: The date_start_utc of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start_utc

    @date_start_utc.setter
    def date_start_utc(self, date_start_utc):
        """Sets the date_start_utc of this TaskDetails.


        :param date_start_utc: The date_start_utc of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_start_utc = date_start_utc

    @property
    def date_due(self):
        """Gets the date_due of this TaskDetails.  # noqa: E501


        :return: The date_due of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this TaskDetails.


        :param date_due: The date_due of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def date_due_utc(self):
        """Gets the date_due_utc of this TaskDetails.  # noqa: E501


        :return: The date_due_utc of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due_utc

    @date_due_utc.setter
    def date_due_utc(self, date_due_utc):
        """Sets the date_due_utc of this TaskDetails.


        :param date_due_utc: The date_due_utc of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_due_utc = date_due_utc

    @property
    def estimated_effort(self):
        """Gets the estimated_effort of this TaskDetails.  # noqa: E501


        :return: The estimated_effort of this TaskDetails.  # noqa: E501
        :rtype: float
        """
        return self._estimated_effort

    @estimated_effort.setter
    def estimated_effort(self, estimated_effort):
        """Sets the estimated_effort of this TaskDetails.


        :param estimated_effort: The estimated_effort of this TaskDetails.  # noqa: E501
        :type: float
        """

        self._estimated_effort = estimated_effort

    @property
    def actual_time(self):
        """Gets the actual_time of this TaskDetails.  # noqa: E501


        :return: The actual_time of this TaskDetails.  # noqa: E501
        :rtype: float
        """
        return self._actual_time

    @actual_time.setter
    def actual_time(self, actual_time):
        """Sets the actual_time of this TaskDetails.


        :param actual_time: The actual_time of this TaskDetails.  # noqa: E501
        :type: float
        """

        self._actual_time = actual_time

    @property
    def tags(self):
        """Gets the tags of this TaskDetails.  # noqa: E501


        :return: The tags of this TaskDetails.  # noqa: E501
        :rtype: list[TagItem]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TaskDetails.


        :param tags: The tags of this TaskDetails.  # noqa: E501
        :type: list[TagItem]
        """

        self._tags = tags

    @property
    def task_status_code(self):
        """Gets the task_status_code of this TaskDetails.  # noqa: E501


        :return: The task_status_code of this TaskDetails.  # noqa: E501
        :rtype: str
        """
        return self._task_status_code

    @task_status_code.setter
    def task_status_code(self, task_status_code):
        """Sets the task_status_code of this TaskDetails.


        :param task_status_code: The task_status_code of this TaskDetails.  # noqa: E501
        :type: str
        """

        self._task_status_code = task_status_code

    @property
    def percent_complete(self):
        """Gets the percent_complete of this TaskDetails.  # noqa: E501


        :return: The percent_complete of this TaskDetails.  # noqa: E501
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this TaskDetails.


        :param percent_complete: The percent_complete of this TaskDetails.  # noqa: E501
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def date_created(self):
        """Gets the date_created of this TaskDetails.  # noqa: E501


        :return: The date_created of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TaskDetails.


        :param date_created: The date_created of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this TaskDetails.  # noqa: E501


        :return: The date_updated of this TaskDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this TaskDetails.


        :param date_updated: The date_updated of this TaskDetails.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
