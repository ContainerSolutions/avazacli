# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avazacli.models.new_payment_allocation import NewPaymentAllocation  # noqa: F401,E501


class NewPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'payment_number': 'str',
        'date_issued': 'datetime',
        'transaction_prefix': 'str',
        'customer_idfk': 'int',
        'exchange_rate': 'float',
        'transaction_reference': 'str',
        'notes': 'str',
        'payment_provider_code': 'str',
        'payment_allocations': 'list[NewPaymentAllocation]'
    }

    attribute_map = {
        'amount': 'Amount',
        'payment_number': 'PaymentNumber',
        'date_issued': 'DateIssued',
        'transaction_prefix': 'TransactionPrefix',
        'customer_idfk': 'CustomerIDFK',
        'exchange_rate': 'ExchangeRate',
        'transaction_reference': 'TransactionReference',
        'notes': 'Notes',
        'payment_provider_code': 'PaymentProviderCode',
        'payment_allocations': 'PaymentAllocations'
    }

    def __init__(self, amount=None, payment_number=None, date_issued=None, transaction_prefix=None, customer_idfk=None, exchange_rate=None, transaction_reference=None, notes=None, payment_provider_code=None, payment_allocations=None):  # noqa: E501
        """NewPayment - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._payment_number = None
        self._date_issued = None
        self._transaction_prefix = None
        self._customer_idfk = None
        self._exchange_rate = None
        self._transaction_reference = None
        self._notes = None
        self._payment_provider_code = None
        self._payment_allocations = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if payment_number is not None:
            self.payment_number = payment_number
        if date_issued is not None:
            self.date_issued = date_issued
        if transaction_prefix is not None:
            self.transaction_prefix = transaction_prefix
        if customer_idfk is not None:
            self.customer_idfk = customer_idfk
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if transaction_reference is not None:
            self.transaction_reference = transaction_reference
        if notes is not None:
            self.notes = notes
        if payment_provider_code is not None:
            self.payment_provider_code = payment_provider_code
        if payment_allocations is not None:
            self.payment_allocations = payment_allocations

    @property
    def amount(self):
        """Gets the amount of this NewPayment.  # noqa: E501


        :return: The amount of this NewPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewPayment.


        :param amount: The amount of this NewPayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def payment_number(self):
        """Gets the payment_number of this NewPayment.  # noqa: E501

        Optional. If not specified will be automatically generated  # noqa: E501

        :return: The payment_number of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this NewPayment.

        Optional. If not specified will be automatically generated  # noqa: E501

        :param payment_number: The payment_number of this NewPayment.  # noqa: E501
        :type: str
        """

        self._payment_number = payment_number

    @property
    def date_issued(self):
        """Gets the date_issued of this NewPayment.  # noqa: E501

        Date of Payment. If not specified, assumes today.  # noqa: E501

        :return: The date_issued of this NewPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewPayment.

        Date of Payment. If not specified, assumes today.  # noqa: E501

        :param date_issued: The date_issued of this NewPayment.  # noqa: E501
        :type: datetime
        """

        self._date_issued = date_issued

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this NewPayment.  # noqa: E501

        Optional to override the default prefix added to Payment Numbers  # noqa: E501

        :return: The transaction_prefix of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this NewPayment.

        Optional to override the default prefix added to Payment Numbers  # noqa: E501

        :param transaction_prefix: The transaction_prefix of this NewPayment.  # noqa: E501
        :type: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this NewPayment.  # noqa: E501

        Only required if no invoice allocations specified.  # noqa: E501

        :return: The customer_idfk of this NewPayment.  # noqa: E501
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this NewPayment.

        Only required if no invoice allocations specified.  # noqa: E501

        :param customer_idfk: The customer_idfk of this NewPayment.  # noqa: E501
        :type: int
        """

        self._customer_idfk = customer_idfk

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewPayment.  # noqa: E501

        Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.  # noqa: E501

        :return: The exchange_rate of this NewPayment.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewPayment.

        Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.  # noqa: E501

        :param exchange_rate: The exchange_rate of this NewPayment.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this NewPayment.  # noqa: E501

        Optional for storing the reference # of the payment method.  # noqa: E501

        :return: The transaction_reference of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this NewPayment.

        Optional for storing the reference # of the payment method.  # noqa: E501

        :param transaction_reference: The transaction_reference of this NewPayment.  # noqa: E501
        :type: str
        """

        self._transaction_reference = transaction_reference

    @property
    def notes(self):
        """Gets the notes of this NewPayment.  # noqa: E501


        :return: The notes of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewPayment.


        :param notes: The notes of this NewPayment.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def payment_provider_code(self):
        """Gets the payment_provider_code of this NewPayment.  # noqa: E501

        Optional for storing the payment provider who was the source of funds.  # noqa: E501

        :return: The payment_provider_code of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_provider_code

    @payment_provider_code.setter
    def payment_provider_code(self, payment_provider_code):
        """Sets the payment_provider_code of this NewPayment.

        Optional for storing the payment provider who was the source of funds.  # noqa: E501

        :param payment_provider_code: The payment_provider_code of this NewPayment.  # noqa: E501
        :type: str
        """

        self._payment_provider_code = payment_provider_code

    @property
    def payment_allocations(self):
        """Gets the payment_allocations of this NewPayment.  # noqa: E501

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.  # noqa: E501

        :return: The payment_allocations of this NewPayment.  # noqa: E501
        :rtype: list[NewPaymentAllocation]
        """
        return self._payment_allocations

    @payment_allocations.setter
    def payment_allocations(self, payment_allocations):
        """Sets the payment_allocations of this NewPayment.

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.  # noqa: E501

        :param payment_allocations: The payment_allocations of this NewPayment.  # noqa: E501
        :type: list[NewPaymentAllocation]
        """

        self._payment_allocations = payment_allocations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
