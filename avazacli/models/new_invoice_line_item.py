# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewInvoiceLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inventory_item_idfk': 'int',
        'inventory_item_name': 'str',
        'description': 'str',
        'quantity': 'float',
        'unit_price': 'float',
        'tax_idfk': 'int',
        'tax_name': 'str',
        'tax_percent': 'float',
        'discount': 'float',
        'project_idfk': 'int'
    }

    attribute_map = {
        'inventory_item_idfk': 'InventoryItemIDFK',
        'inventory_item_name': 'InventoryItemName',
        'description': 'Description',
        'quantity': 'Quantity',
        'unit_price': 'UnitPrice',
        'tax_idfk': 'TaxIDFK',
        'tax_name': 'TaxName',
        'tax_percent': 'TaxPercent',
        'discount': 'Discount',
        'project_idfk': 'ProjectIDFK'
    }

    def __init__(self, inventory_item_idfk=None, inventory_item_name=None, description=None, quantity=None, unit_price=None, tax_idfk=None, tax_name=None, tax_percent=None, discount=None, project_idfk=None):  # noqa: E501
        """NewInvoiceLineItem - a model defined in Swagger"""  # noqa: E501

        self._inventory_item_idfk = None
        self._inventory_item_name = None
        self._description = None
        self._quantity = None
        self._unit_price = None
        self._tax_idfk = None
        self._tax_name = None
        self._tax_percent = None
        self._discount = None
        self._project_idfk = None
        self.discriminator = None

        if inventory_item_idfk is not None:
            self.inventory_item_idfk = inventory_item_idfk
        if inventory_item_name is not None:
            self.inventory_item_name = inventory_item_name
        if description is not None:
            self.description = description
        self.quantity = quantity
        self.unit_price = unit_price
        if tax_idfk is not None:
            self.tax_idfk = tax_idfk
        if tax_name is not None:
            self.tax_name = tax_name
        if tax_percent is not None:
            self.tax_percent = tax_percent
        if discount is not None:
            self.discount = discount
        if project_idfk is not None:
            self.project_idfk = project_idfk

    @property
    def inventory_item_idfk(self):
        """Gets the inventory_item_idfk of this NewInvoiceLineItem.  # noqa: E501

        If not specified then Inventory Item Name must be specified.  # noqa: E501

        :return: The inventory_item_idfk of this NewInvoiceLineItem.  # noqa: E501
        :rtype: int
        """
        return self._inventory_item_idfk

    @inventory_item_idfk.setter
    def inventory_item_idfk(self, inventory_item_idfk):
        """Sets the inventory_item_idfk of this NewInvoiceLineItem.

        If not specified then Inventory Item Name must be specified.  # noqa: E501

        :param inventory_item_idfk: The inventory_item_idfk of this NewInvoiceLineItem.  # noqa: E501
        :type: int
        """

        self._inventory_item_idfk = inventory_item_idfk

    @property
    def inventory_item_name(self):
        """Gets the inventory_item_name of this NewInvoiceLineItem.  # noqa: E501

        If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.  # noqa: E501

        :return: The inventory_item_name of this NewInvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._inventory_item_name

    @inventory_item_name.setter
    def inventory_item_name(self, inventory_item_name):
        """Sets the inventory_item_name of this NewInvoiceLineItem.

        If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.  # noqa: E501

        :param inventory_item_name: The inventory_item_name of this NewInvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._inventory_item_name = inventory_item_name

    @property
    def description(self):
        """Gets the description of this NewInvoiceLineItem.  # noqa: E501

        Plain UTF8 text. (no HTML)  # noqa: E501

        :return: The description of this NewInvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewInvoiceLineItem.

        Plain UTF8 text. (no HTML)  # noqa: E501

        :param description: The description of this NewInvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this NewInvoiceLineItem.  # noqa: E501

        The quantity for the line item  # noqa: E501

        :return: The quantity of this NewInvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this NewInvoiceLineItem.

        The quantity for the line item  # noqa: E501

        :param quantity: The quantity of this NewInvoiceLineItem.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this NewInvoiceLineItem.  # noqa: E501

        The unit price for the lineitem.  # noqa: E501

        :return: The unit_price of this NewInvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this NewInvoiceLineItem.

        The unit price for the lineitem.  # noqa: E501

        :param unit_price: The unit_price of this NewInvoiceLineItem.  # noqa: E501
        :type: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this NewInvoiceLineItem.  # noqa: E501


        :return: The tax_idfk of this NewInvoiceLineItem.  # noqa: E501
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this NewInvoiceLineItem.


        :param tax_idfk: The tax_idfk of this NewInvoiceLineItem.  # noqa: E501
        :type: int
        """

        self._tax_idfk = tax_idfk

    @property
    def tax_name(self):
        """Gets the tax_name of this NewInvoiceLineItem.  # noqa: E501

        Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.  # noqa: E501

        :return: The tax_name of this NewInvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this NewInvoiceLineItem.

        Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.  # noqa: E501

        :param tax_name: The tax_name of this NewInvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._tax_name = tax_name

    @property
    def tax_percent(self):
        """Gets the tax_percent of this NewInvoiceLineItem.  # noqa: E501

        The Tax Percent will only be used if a new tax is being created.  # noqa: E501

        :return: The tax_percent of this NewInvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_percent

    @tax_percent.setter
    def tax_percent(self, tax_percent):
        """Sets the tax_percent of this NewInvoiceLineItem.

        The Tax Percent will only be used if a new tax is being created.  # noqa: E501

        :param tax_percent: The tax_percent of this NewInvoiceLineItem.  # noqa: E501
        :type: float
        """

        self._tax_percent = tax_percent

    @property
    def discount(self):
        """Gets the discount of this NewInvoiceLineItem.  # noqa: E501

        Enter 10.5 to give a 10.5% discount  # noqa: E501

        :return: The discount of this NewInvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this NewInvoiceLineItem.

        Enter 10.5 to give a 10.5% discount  # noqa: E501

        :param discount: The discount of this NewInvoiceLineItem.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewInvoiceLineItem.  # noqa: E501

        Optional. Project ID of an Avaza Project that belongs to this customer, so line item is attributed to that Project for reporting.  # noqa: E501

        :return: The project_idfk of this NewInvoiceLineItem.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewInvoiceLineItem.

        Optional. Project ID of an Avaza Project that belongs to this customer, so line item is attributed to that Project for reporting.  # noqa: E501

        :param project_idfk: The project_idfk of this NewInvoiceLineItem.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewInvoiceLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
