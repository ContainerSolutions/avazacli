# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InventoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inventory_item_id': 'int',
        'name': 'str',
        'description': 'str',
        'sku': 'str',
        'cost_price': 'float',
        'sale_price': 'float',
        'sale_tax_idfk': 'int',
        'is_hidden': 'bool',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'inventory_item_id': 'InventoryItemID',
        'name': 'Name',
        'description': 'Description',
        'sku': 'SKU',
        'cost_price': 'CostPrice',
        'sale_price': 'SalePrice',
        'sale_tax_idfk': 'SaleTaxIDFK',
        'is_hidden': 'isHidden',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, inventory_item_id=None, name=None, description=None, sku=None, cost_price=None, sale_price=None, sale_tax_idfk=None, is_hidden=None, date_created=None, date_updated=None):  # noqa: E501
        """InventoryItem - a model defined in Swagger"""  # noqa: E501

        self._inventory_item_id = None
        self._name = None
        self._description = None
        self._sku = None
        self._cost_price = None
        self._sale_price = None
        self._sale_tax_idfk = None
        self._is_hidden = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if inventory_item_id is not None:
            self.inventory_item_id = inventory_item_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if sku is not None:
            self.sku = sku
        if cost_price is not None:
            self.cost_price = cost_price
        if sale_price is not None:
            self.sale_price = sale_price
        if sale_tax_idfk is not None:
            self.sale_tax_idfk = sale_tax_idfk
        if is_hidden is not None:
            self.is_hidden = is_hidden
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def inventory_item_id(self):
        """Gets the inventory_item_id of this InventoryItem.  # noqa: E501


        :return: The inventory_item_id of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._inventory_item_id

    @inventory_item_id.setter
    def inventory_item_id(self, inventory_item_id):
        """Sets the inventory_item_id of this InventoryItem.


        :param inventory_item_id: The inventory_item_id of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._inventory_item_id = inventory_item_id

    @property
    def name(self):
        """Gets the name of this InventoryItem.  # noqa: E501


        :return: The name of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InventoryItem.


        :param name: The name of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InventoryItem.  # noqa: E501


        :return: The description of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InventoryItem.


        :param description: The description of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sku(self):
        """Gets the sku of this InventoryItem.  # noqa: E501


        :return: The sku of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InventoryItem.


        :param sku: The sku of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def cost_price(self):
        """Gets the cost_price of this InventoryItem.  # noqa: E501


        :return: The cost_price of this InventoryItem.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this InventoryItem.


        :param cost_price: The cost_price of this InventoryItem.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def sale_price(self):
        """Gets the sale_price of this InventoryItem.  # noqa: E501


        :return: The sale_price of this InventoryItem.  # noqa: E501
        :rtype: float
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this InventoryItem.


        :param sale_price: The sale_price of this InventoryItem.  # noqa: E501
        :type: float
        """

        self._sale_price = sale_price

    @property
    def sale_tax_idfk(self):
        """Gets the sale_tax_idfk of this InventoryItem.  # noqa: E501


        :return: The sale_tax_idfk of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._sale_tax_idfk

    @sale_tax_idfk.setter
    def sale_tax_idfk(self, sale_tax_idfk):
        """Sets the sale_tax_idfk of this InventoryItem.


        :param sale_tax_idfk: The sale_tax_idfk of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._sale_tax_idfk = sale_tax_idfk

    @property
    def is_hidden(self):
        """Gets the is_hidden of this InventoryItem.  # noqa: E501


        :return: The is_hidden of this InventoryItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this InventoryItem.


        :param is_hidden: The is_hidden of this InventoryItem.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def date_created(self):
        """Gets the date_created of this InventoryItem.  # noqa: E501


        :return: The date_created of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this InventoryItem.


        :param date_created: The date_created of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this InventoryItem.  # noqa: E501


        :return: The date_updated of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this InventoryItem.


        :param date_updated: The date_updated of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
