# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScheduleAssignmentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_assignment_id': 'int',
        'account_idfk': 'int',
        'user_idfk': 'int',
        'schedule_series_idfk': 'int',
        'schedule_date': 'datetime',
        'duration': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'schedule_assignment_id': 'ScheduleAssignmentID',
        'account_idfk': 'AccountIDFK',
        'user_idfk': 'UserIDFK',
        'schedule_series_idfk': 'ScheduleSeriesIDFK',
        'schedule_date': 'ScheduleDate',
        'duration': 'Duration',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, schedule_assignment_id=None, account_idfk=None, user_idfk=None, schedule_series_idfk=None, schedule_date=None, duration=None, date_created=None, date_updated=None):  # noqa: E501
        """ScheduleAssignmentDetails - a model defined in Swagger"""  # noqa: E501

        self._schedule_assignment_id = None
        self._account_idfk = None
        self._user_idfk = None
        self._schedule_series_idfk = None
        self._schedule_date = None
        self._duration = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if schedule_assignment_id is not None:
            self.schedule_assignment_id = schedule_assignment_id
        if account_idfk is not None:
            self.account_idfk = account_idfk
        if user_idfk is not None:
            self.user_idfk = user_idfk
        if schedule_series_idfk is not None:
            self.schedule_series_idfk = schedule_series_idfk
        if schedule_date is not None:
            self.schedule_date = schedule_date
        if duration is not None:
            self.duration = duration
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def schedule_assignment_id(self):
        """Gets the schedule_assignment_id of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The schedule_assignment_id of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: int
        """
        return self._schedule_assignment_id

    @schedule_assignment_id.setter
    def schedule_assignment_id(self, schedule_assignment_id):
        """Sets the schedule_assignment_id of this ScheduleAssignmentDetails.


        :param schedule_assignment_id: The schedule_assignment_id of this ScheduleAssignmentDetails.  # noqa: E501
        :type: int
        """

        self._schedule_assignment_id = schedule_assignment_id

    @property
    def account_idfk(self):
        """Gets the account_idfk of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The account_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: int
        """
        return self._account_idfk

    @account_idfk.setter
    def account_idfk(self, account_idfk):
        """Sets the account_idfk of this ScheduleAssignmentDetails.


        :param account_idfk: The account_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :type: int
        """

        self._account_idfk = account_idfk

    @property
    def user_idfk(self):
        """Gets the user_idfk of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The user_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this ScheduleAssignmentDetails.


        :param user_idfk: The user_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :type: int
        """

        self._user_idfk = user_idfk

    @property
    def schedule_series_idfk(self):
        """Gets the schedule_series_idfk of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The schedule_series_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: int
        """
        return self._schedule_series_idfk

    @schedule_series_idfk.setter
    def schedule_series_idfk(self, schedule_series_idfk):
        """Sets the schedule_series_idfk of this ScheduleAssignmentDetails.


        :param schedule_series_idfk: The schedule_series_idfk of this ScheduleAssignmentDetails.  # noqa: E501
        :type: int
        """

        self._schedule_series_idfk = schedule_series_idfk

    @property
    def schedule_date(self):
        """Gets the schedule_date of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The schedule_date of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._schedule_date

    @schedule_date.setter
    def schedule_date(self, schedule_date):
        """Sets the schedule_date of this ScheduleAssignmentDetails.


        :param schedule_date: The schedule_date of this ScheduleAssignmentDetails.  # noqa: E501
        :type: datetime
        """

        self._schedule_date = schedule_date

    @property
    def duration(self):
        """Gets the duration of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The duration of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ScheduleAssignmentDetails.


        :param duration: The duration of this ScheduleAssignmentDetails.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def date_created(self):
        """Gets the date_created of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The date_created of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ScheduleAssignmentDetails.


        :param date_created: The date_created of this ScheduleAssignmentDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ScheduleAssignmentDetails.  # noqa: E501


        :return: The date_updated of this ScheduleAssignmentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ScheduleAssignmentDetails.


        :param date_updated: The date_updated of this ScheduleAssignmentDetails.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleAssignmentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
