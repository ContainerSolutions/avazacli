# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompanyContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_id': 'int',
        'company_idfk': 'int',
        'company_name': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'email': 'str',
        'phone': 'str',
        'mobile': 'str',
        'position_title': 'str',
        'time_zone': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime'
    }

    attribute_map = {
        'contact_id': 'ContactID',
        'company_idfk': 'CompanyIDFK',
        'company_name': 'CompanyName',
        'firstname': 'Firstname',
        'lastname': 'Lastname',
        'email': 'Email',
        'phone': 'Phone',
        'mobile': 'Mobile',
        'position_title': 'PositionTitle',
        'time_zone': 'TimeZone',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated'
    }

    def __init__(self, contact_id=None, company_idfk=None, company_name=None, firstname=None, lastname=None, email=None, phone=None, mobile=None, position_title=None, time_zone=None, date_created=None, date_updated=None):  # noqa: E501
        """CompanyContact - a model defined in Swagger"""  # noqa: E501

        self._contact_id = None
        self._company_idfk = None
        self._company_name = None
        self._firstname = None
        self._lastname = None
        self._email = None
        self._phone = None
        self._mobile = None
        self._position_title = None
        self._time_zone = None
        self._date_created = None
        self._date_updated = None
        self.discriminator = None

        if contact_id is not None:
            self.contact_id = contact_id
        if company_idfk is not None:
            self.company_idfk = company_idfk
        if company_name is not None:
            self.company_name = company_name
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if mobile is not None:
            self.mobile = mobile
        if position_title is not None:
            self.position_title = position_title
        if time_zone is not None:
            self.time_zone = time_zone
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated

    @property
    def contact_id(self):
        """Gets the contact_id of this CompanyContact.  # noqa: E501


        :return: The contact_id of this CompanyContact.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this CompanyContact.


        :param contact_id: The contact_id of this CompanyContact.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def company_idfk(self):
        """Gets the company_idfk of this CompanyContact.  # noqa: E501


        :return: The company_idfk of this CompanyContact.  # noqa: E501
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this CompanyContact.


        :param company_idfk: The company_idfk of this CompanyContact.  # noqa: E501
        :type: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this CompanyContact.  # noqa: E501


        :return: The company_name of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyContact.


        :param company_name: The company_name of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def firstname(self):
        """Gets the firstname of this CompanyContact.  # noqa: E501


        :return: The firstname of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this CompanyContact.


        :param firstname: The firstname of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this CompanyContact.  # noqa: E501


        :return: The lastname of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this CompanyContact.


        :param lastname: The lastname of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def email(self):
        """Gets the email of this CompanyContact.  # noqa: E501


        :return: The email of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CompanyContact.


        :param email: The email of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CompanyContact.  # noqa: E501


        :return: The phone of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CompanyContact.


        :param phone: The phone of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def mobile(self):
        """Gets the mobile of this CompanyContact.  # noqa: E501


        :return: The mobile of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this CompanyContact.


        :param mobile: The mobile of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def position_title(self):
        """Gets the position_title of this CompanyContact.  # noqa: E501


        :return: The position_title of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._position_title

    @position_title.setter
    def position_title(self, position_title):
        """Sets the position_title of this CompanyContact.


        :param position_title: The position_title of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._position_title = position_title

    @property
    def time_zone(self):
        """Gets the time_zone of this CompanyContact.  # noqa: E501


        :return: The time_zone of this CompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CompanyContact.


        :param time_zone: The time_zone of this CompanyContact.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def date_created(self):
        """Gets the date_created of this CompanyContact.  # noqa: E501


        :return: The date_created of this CompanyContact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CompanyContact.


        :param date_created: The date_created of this CompanyContact.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this CompanyContact.  # noqa: E501


        :return: The date_updated of this CompanyContact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this CompanyContact.


        :param date_updated: The date_updated of this CompanyContact.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
