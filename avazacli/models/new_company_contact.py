# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewCompanyContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_idfk': 'int',
        'company_name': 'str',
        'currency_code': 'str',
        'company_billing_address': 'str',
        'company_billing_address_line': 'str',
        'company_billing_address_city': 'str',
        'company_billing_address_state': 'str',
        'company_billing_address_post_code': 'str',
        'company_billing_address_country_code': 'str',
        'contact_email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'position_title': 'str',
        'mobile': 'str',
        'phone': 'str',
        'update_existing': 'bool'
    }

    attribute_map = {
        'company_idfk': 'CompanyIDFK',
        'company_name': 'CompanyName',
        'currency_code': 'CurrencyCode',
        'company_billing_address': 'CompanyBillingAddress',
        'company_billing_address_line': 'CompanyBillingAddressLine',
        'company_billing_address_city': 'CompanyBillingAddressCity',
        'company_billing_address_state': 'CompanyBillingAddressState',
        'company_billing_address_post_code': 'CompanyBillingAddressPostCode',
        'company_billing_address_country_code': 'CompanyBillingAddressCountryCode',
        'contact_email': 'ContactEmail',
        'firstname': 'Firstname',
        'lastname': 'Lastname',
        'position_title': 'PositionTitle',
        'mobile': 'Mobile',
        'phone': 'Phone',
        'update_existing': 'UpdateExisting'
    }

    def __init__(self, company_idfk=None, company_name=None, currency_code=None, company_billing_address=None, company_billing_address_line=None, company_billing_address_city=None, company_billing_address_state=None, company_billing_address_post_code=None, company_billing_address_country_code=None, contact_email=None, firstname=None, lastname=None, position_title=None, mobile=None, phone=None, update_existing=None):  # noqa: E501
        """NewCompanyContact - a model defined in Swagger"""  # noqa: E501

        self._company_idfk = None
        self._company_name = None
        self._currency_code = None
        self._company_billing_address = None
        self._company_billing_address_line = None
        self._company_billing_address_city = None
        self._company_billing_address_state = None
        self._company_billing_address_post_code = None
        self._company_billing_address_country_code = None
        self._contact_email = None
        self._firstname = None
        self._lastname = None
        self._position_title = None
        self._mobile = None
        self._phone = None
        self._update_existing = None
        self.discriminator = None

        if company_idfk is not None:
            self.company_idfk = company_idfk
        if company_name is not None:
            self.company_name = company_name
        if currency_code is not None:
            self.currency_code = currency_code
        if company_billing_address is not None:
            self.company_billing_address = company_billing_address
        if company_billing_address_line is not None:
            self.company_billing_address_line = company_billing_address_line
        if company_billing_address_city is not None:
            self.company_billing_address_city = company_billing_address_city
        if company_billing_address_state is not None:
            self.company_billing_address_state = company_billing_address_state
        if company_billing_address_post_code is not None:
            self.company_billing_address_post_code = company_billing_address_post_code
        if company_billing_address_country_code is not None:
            self.company_billing_address_country_code = company_billing_address_country_code
        self.contact_email = contact_email
        self.firstname = firstname
        self.lastname = lastname
        if position_title is not None:
            self.position_title = position_title
        if mobile is not None:
            self.mobile = mobile
        if phone is not None:
            self.phone = phone
        if update_existing is not None:
            self.update_existing = update_existing

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewCompanyContact.  # noqa: E501


        :return: The company_idfk of this NewCompanyContact.  # noqa: E501
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewCompanyContact.


        :param company_idfk: The company_idfk of this NewCompanyContact.  # noqa: E501
        :type: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this NewCompanyContact.  # noqa: E501


        :return: The company_name of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this NewCompanyContact.


        :param company_name: The company_name of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def currency_code(self):
        """Gets the currency_code of this NewCompanyContact.  # noqa: E501


        :return: The currency_code of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewCompanyContact.


        :param currency_code: The currency_code of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def company_billing_address(self):
        """Gets the company_billing_address of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address

    @company_billing_address.setter
    def company_billing_address(self, company_billing_address):
        """Sets the company_billing_address of this NewCompanyContact.


        :param company_billing_address: The company_billing_address of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address = company_billing_address

    @property
    def company_billing_address_line(self):
        """Gets the company_billing_address_line of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address_line of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address_line

    @company_billing_address_line.setter
    def company_billing_address_line(self, company_billing_address_line):
        """Sets the company_billing_address_line of this NewCompanyContact.


        :param company_billing_address_line: The company_billing_address_line of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address_line = company_billing_address_line

    @property
    def company_billing_address_city(self):
        """Gets the company_billing_address_city of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address_city of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address_city

    @company_billing_address_city.setter
    def company_billing_address_city(self, company_billing_address_city):
        """Sets the company_billing_address_city of this NewCompanyContact.


        :param company_billing_address_city: The company_billing_address_city of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address_city = company_billing_address_city

    @property
    def company_billing_address_state(self):
        """Gets the company_billing_address_state of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address_state of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address_state

    @company_billing_address_state.setter
    def company_billing_address_state(self, company_billing_address_state):
        """Sets the company_billing_address_state of this NewCompanyContact.


        :param company_billing_address_state: The company_billing_address_state of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address_state = company_billing_address_state

    @property
    def company_billing_address_post_code(self):
        """Gets the company_billing_address_post_code of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address_post_code of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address_post_code

    @company_billing_address_post_code.setter
    def company_billing_address_post_code(self, company_billing_address_post_code):
        """Sets the company_billing_address_post_code of this NewCompanyContact.


        :param company_billing_address_post_code: The company_billing_address_post_code of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address_post_code = company_billing_address_post_code

    @property
    def company_billing_address_country_code(self):
        """Gets the company_billing_address_country_code of this NewCompanyContact.  # noqa: E501


        :return: The company_billing_address_country_code of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._company_billing_address_country_code

    @company_billing_address_country_code.setter
    def company_billing_address_country_code(self, company_billing_address_country_code):
        """Sets the company_billing_address_country_code of this NewCompanyContact.


        :param company_billing_address_country_code: The company_billing_address_country_code of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._company_billing_address_country_code = company_billing_address_country_code

    @property
    def contact_email(self):
        """Gets the contact_email of this NewCompanyContact.  # noqa: E501


        :return: The contact_email of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this NewCompanyContact.


        :param contact_email: The contact_email of this NewCompanyContact.  # noqa: E501
        :type: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def firstname(self):
        """Gets the firstname of this NewCompanyContact.  # noqa: E501


        :return: The firstname of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewCompanyContact.


        :param firstname: The firstname of this NewCompanyContact.  # noqa: E501
        :type: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this NewCompanyContact.  # noqa: E501


        :return: The lastname of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewCompanyContact.


        :param lastname: The lastname of this NewCompanyContact.  # noqa: E501
        :type: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def position_title(self):
        """Gets the position_title of this NewCompanyContact.  # noqa: E501


        :return: The position_title of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._position_title

    @position_title.setter
    def position_title(self, position_title):
        """Sets the position_title of this NewCompanyContact.


        :param position_title: The position_title of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._position_title = position_title

    @property
    def mobile(self):
        """Gets the mobile of this NewCompanyContact.  # noqa: E501


        :return: The mobile of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this NewCompanyContact.


        :param mobile: The mobile of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def phone(self):
        """Gets the phone of this NewCompanyContact.  # noqa: E501


        :return: The phone of this NewCompanyContact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this NewCompanyContact.


        :param phone: The phone of this NewCompanyContact.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def update_existing(self):
        """Gets the update_existing of this NewCompanyContact.  # noqa: E501


        :return: The update_existing of this NewCompanyContact.  # noqa: E501
        :rtype: bool
        """
        return self._update_existing

    @update_existing.setter
    def update_existing(self, update_existing):
        """Sets the update_existing of this NewCompanyContact.


        :param update_existing: The update_existing of this NewCompanyContact.  # noqa: E501
        :type: bool
        """

        self._update_existing = update_existing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCompanyContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
