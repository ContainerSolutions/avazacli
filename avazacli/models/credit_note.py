# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avazacli.models.credit_note_allocation import CreditNoteAllocation  # noqa: F401,E501
from avazacli.models.credit_note_line_item import CreditNoteLineItem  # noqa: F401,E501


class CreditNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'int',
        'transaction_prefix': 'str',
        'credit_note_number': 'str',
        'customer_idfk': 'int',
        'date_issued': 'datetime',
        'transaction_status_code': 'str',
        'balance': 'float',
        'currency_code': 'str',
        'total_amount': 'float',
        'notes': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'credit_note_allocations': 'list[CreditNoteAllocation]',
        'credit_note_line_items': 'list[CreditNoteLineItem]'
    }

    attribute_map = {
        'transaction_id': 'TransactionID',
        'transaction_prefix': 'TransactionPrefix',
        'credit_note_number': 'CreditNoteNumber',
        'customer_idfk': 'CustomerIDFK',
        'date_issued': 'DateIssued',
        'transaction_status_code': 'TransactionStatusCode',
        'balance': 'Balance',
        'currency_code': 'CurrencyCode',
        'total_amount': 'TotalAmount',
        'notes': 'Notes',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated',
        'credit_note_allocations': 'CreditNoteAllocations',
        'credit_note_line_items': 'CreditNoteLineItems'
    }

    def __init__(self, transaction_id=None, transaction_prefix=None, credit_note_number=None, customer_idfk=None, date_issued=None, transaction_status_code=None, balance=None, currency_code=None, total_amount=None, notes=None, date_created=None, date_updated=None, credit_note_allocations=None, credit_note_line_items=None):  # noqa: E501
        """CreditNote - a model defined in Swagger"""  # noqa: E501

        self._transaction_id = None
        self._transaction_prefix = None
        self._credit_note_number = None
        self._customer_idfk = None
        self._date_issued = None
        self._transaction_status_code = None
        self._balance = None
        self._currency_code = None
        self._total_amount = None
        self._notes = None
        self._date_created = None
        self._date_updated = None
        self._credit_note_allocations = None
        self._credit_note_line_items = None
        self.discriminator = None

        if transaction_id is not None:
            self.transaction_id = transaction_id
        if transaction_prefix is not None:
            self.transaction_prefix = transaction_prefix
        if credit_note_number is not None:
            self.credit_note_number = credit_note_number
        if customer_idfk is not None:
            self.customer_idfk = customer_idfk
        if date_issued is not None:
            self.date_issued = date_issued
        if transaction_status_code is not None:
            self.transaction_status_code = transaction_status_code
        if balance is not None:
            self.balance = balance
        if currency_code is not None:
            self.currency_code = currency_code
        if total_amount is not None:
            self.total_amount = total_amount
        if notes is not None:
            self.notes = notes
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if credit_note_allocations is not None:
            self.credit_note_allocations = credit_note_allocations
        if credit_note_line_items is not None:
            self.credit_note_line_items = credit_note_line_items

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CreditNote.  # noqa: E501


        :return: The transaction_id of this CreditNote.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CreditNote.


        :param transaction_id: The transaction_id of this CreditNote.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this CreditNote.  # noqa: E501


        :return: The transaction_prefix of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this CreditNote.


        :param transaction_prefix: The transaction_prefix of this CreditNote.  # noqa: E501
        :type: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def credit_note_number(self):
        """Gets the credit_note_number of this CreditNote.  # noqa: E501


        :return: The credit_note_number of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_number

    @credit_note_number.setter
    def credit_note_number(self, credit_note_number):
        """Sets the credit_note_number of this CreditNote.


        :param credit_note_number: The credit_note_number of this CreditNote.  # noqa: E501
        :type: str
        """

        self._credit_note_number = credit_note_number

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this CreditNote.  # noqa: E501


        :return: The customer_idfk of this CreditNote.  # noqa: E501
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this CreditNote.


        :param customer_idfk: The customer_idfk of this CreditNote.  # noqa: E501
        :type: int
        """

        self._customer_idfk = customer_idfk

    @property
    def date_issued(self):
        """Gets the date_issued of this CreditNote.  # noqa: E501


        :return: The date_issued of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this CreditNote.


        :param date_issued: The date_issued of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._date_issued = date_issued

    @property
    def transaction_status_code(self):
        """Gets the transaction_status_code of this CreditNote.  # noqa: E501


        :return: The transaction_status_code of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status_code

    @transaction_status_code.setter
    def transaction_status_code(self, transaction_status_code):
        """Sets the transaction_status_code of this CreditNote.


        :param transaction_status_code: The transaction_status_code of this CreditNote.  # noqa: E501
        :type: str
        """

        self._transaction_status_code = transaction_status_code

    @property
    def balance(self):
        """Gets the balance of this CreditNote.  # noqa: E501


        :return: The balance of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CreditNote.


        :param balance: The balance of this CreditNote.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def currency_code(self):
        """Gets the currency_code of this CreditNote.  # noqa: E501


        :return: The currency_code of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreditNote.


        :param currency_code: The currency_code of this CreditNote.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def total_amount(self):
        """Gets the total_amount of this CreditNote.  # noqa: E501


        :return: The total_amount of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CreditNote.


        :param total_amount: The total_amount of this CreditNote.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def notes(self):
        """Gets the notes of this CreditNote.  # noqa: E501


        :return: The notes of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreditNote.


        :param notes: The notes of this CreditNote.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def date_created(self):
        """Gets the date_created of this CreditNote.  # noqa: E501


        :return: The date_created of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CreditNote.


        :param date_created: The date_created of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this CreditNote.  # noqa: E501


        :return: The date_updated of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this CreditNote.


        :param date_updated: The date_updated of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def credit_note_allocations(self):
        """Gets the credit_note_allocations of this CreditNote.  # noqa: E501


        :return: The credit_note_allocations of this CreditNote.  # noqa: E501
        :rtype: list[CreditNoteAllocation]
        """
        return self._credit_note_allocations

    @credit_note_allocations.setter
    def credit_note_allocations(self, credit_note_allocations):
        """Sets the credit_note_allocations of this CreditNote.


        :param credit_note_allocations: The credit_note_allocations of this CreditNote.  # noqa: E501
        :type: list[CreditNoteAllocation]
        """

        self._credit_note_allocations = credit_note_allocations

    @property
    def credit_note_line_items(self):
        """Gets the credit_note_line_items of this CreditNote.  # noqa: E501


        :return: The credit_note_line_items of this CreditNote.  # noqa: E501
        :rtype: list[CreditNoteLineItem]
        """
        return self._credit_note_line_items

    @credit_note_line_items.setter
    def credit_note_line_items(self, credit_note_line_items):
        """Sets the credit_note_line_items of this CreditNote.


        :param credit_note_line_items: The credit_note_line_items of this CreditNote.  # noqa: E501
        :type: list[CreditNoteLineItem]
        """

        self._credit_note_line_items = credit_note_line_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
