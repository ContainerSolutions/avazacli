# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avazacli.models.new_invoice_line_item import NewInvoiceLineItem  # noqa: F401,E501


class NewInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_prefix': 'str',
        'invoice_number': 'str',
        'company_idfk': 'int',
        'company_name': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'email': 'str',
        'currency_code': 'str',
        'exchange_rate': 'float',
        'invoice_template_idfk': 'int',
        'subject': 'str',
        'customer_po_number': 'str',
        'date_issued': 'datetime',
        'payment_terms': 'int',
        'due_date': 'datetime',
        'transaction_tax_config_code': 'str',
        'notes': 'str',
        'line_items': 'list[NewInvoiceLineItem]'
    }

    attribute_map = {
        'transaction_prefix': 'TransactionPrefix',
        'invoice_number': 'InvoiceNumber',
        'company_idfk': 'CompanyIDFK',
        'company_name': 'CompanyName',
        'firstname': 'Firstname',
        'lastname': 'Lastname',
        'email': 'Email',
        'currency_code': 'CurrencyCode',
        'exchange_rate': 'ExchangeRate',
        'invoice_template_idfk': 'InvoiceTemplateIDFK',
        'subject': 'Subject',
        'customer_po_number': 'CustomerPONumber',
        'date_issued': 'DateIssued',
        'payment_terms': 'PaymentTerms',
        'due_date': 'DueDate',
        'transaction_tax_config_code': 'TransactionTaxConfigCode',
        'notes': 'Notes',
        'line_items': 'LineItems'
    }

    def __init__(self, transaction_prefix=None, invoice_number=None, company_idfk=None, company_name=None, firstname=None, lastname=None, email=None, currency_code=None, exchange_rate=None, invoice_template_idfk=None, subject=None, customer_po_number=None, date_issued=None, payment_terms=None, due_date=None, transaction_tax_config_code=None, notes=None, line_items=None):  # noqa: E501
        """NewInvoice - a model defined in Swagger"""  # noqa: E501

        self._transaction_prefix = None
        self._invoice_number = None
        self._company_idfk = None
        self._company_name = None
        self._firstname = None
        self._lastname = None
        self._email = None
        self._currency_code = None
        self._exchange_rate = None
        self._invoice_template_idfk = None
        self._subject = None
        self._customer_po_number = None
        self._date_issued = None
        self._payment_terms = None
        self._due_date = None
        self._transaction_tax_config_code = None
        self._notes = None
        self._line_items = None
        self.discriminator = None

        if transaction_prefix is not None:
            self.transaction_prefix = transaction_prefix
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if company_idfk is not None:
            self.company_idfk = company_idfk
        if company_name is not None:
            self.company_name = company_name
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if email is not None:
            self.email = email
        if currency_code is not None:
            self.currency_code = currency_code
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if invoice_template_idfk is not None:
            self.invoice_template_idfk = invoice_template_idfk
        if subject is not None:
            self.subject = subject
        if customer_po_number is not None:
            self.customer_po_number = customer_po_number
        if date_issued is not None:
            self.date_issued = date_issued
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if due_date is not None:
            self.due_date = due_date
        if transaction_tax_config_code is not None:
            self.transaction_tax_config_code = transaction_tax_config_code
        if notes is not None:
            self.notes = notes
        if line_items is not None:
            self.line_items = line_items

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this NewInvoice.  # noqa: E501

        A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.  # noqa: E501

        :return: The transaction_prefix of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this NewInvoice.

        A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.  # noqa: E501

        :param transaction_prefix: The transaction_prefix of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def invoice_number(self):
        """Gets the invoice_number of this NewInvoice.  # noqa: E501

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.  # noqa: E501

        :return: The invoice_number of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this NewInvoice.

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.  # noqa: E501

        :param invoice_number: The invoice_number of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewInvoice.  # noqa: E501

        If left blank then you must specify Company Name.  # noqa: E501

        :return: The company_idfk of this NewInvoice.  # noqa: E501
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewInvoice.

        If left blank then you must specify Company Name.  # noqa: E501

        :param company_idfk: The company_idfk of this NewInvoice.  # noqa: E501
        :type: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this NewInvoice.  # noqa: E501

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.  # noqa: E501

        :return: The company_name of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this NewInvoice.

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.  # noqa: E501

        :param company_name: The company_name of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def firstname(self):
        """Gets the firstname of this NewInvoice.  # noqa: E501

        Specified value will be used to create a new customer contact only if a new customer is being created.  # noqa: E501

        :return: The firstname of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewInvoice.

        Specified value will be used to create a new customer contact only if a new customer is being created.  # noqa: E501

        :param firstname: The firstname of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this NewInvoice.  # noqa: E501

        Specified value will be used to create a new customer contact only if a new customer is being created.  # noqa: E501

        :return: The lastname of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewInvoice.

        Specified value will be used to create a new customer contact only if a new customer is being created.  # noqa: E501

        :param lastname: The lastname of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def email(self):
        """Gets the email of this NewInvoice.  # noqa: E501


        :return: The email of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewInvoice.


        :param email: The email of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def currency_code(self):
        """Gets the currency_code of this NewInvoice.  # noqa: E501

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.  # noqa: E501

        :return: The currency_code of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewInvoice.

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.  # noqa: E501

        :param currency_code: The currency_code of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewInvoice.  # noqa: E501

        Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.  # noqa: E501

        :return: The exchange_rate of this NewInvoice.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewInvoice.

        Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.  # noqa: E501

        :param exchange_rate: The exchange_rate of this NewInvoice.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def invoice_template_idfk(self):
        """Gets the invoice_template_idfk of this NewInvoice.  # noqa: E501

        If left blank the account default invoice template will be used.  # noqa: E501

        :return: The invoice_template_idfk of this NewInvoice.  # noqa: E501
        :rtype: int
        """
        return self._invoice_template_idfk

    @invoice_template_idfk.setter
    def invoice_template_idfk(self, invoice_template_idfk):
        """Sets the invoice_template_idfk of this NewInvoice.

        If left blank the account default invoice template will be used.  # noqa: E501

        :param invoice_template_idfk: The invoice_template_idfk of this NewInvoice.  # noqa: E501
        :type: int
        """

        self._invoice_template_idfk = invoice_template_idfk

    @property
    def subject(self):
        """Gets the subject of this NewInvoice.  # noqa: E501

        Plain UTF8 text. (no HTML). 255 characters max  # noqa: E501

        :return: The subject of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NewInvoice.

        Plain UTF8 text. (no HTML). 255 characters max  # noqa: E501

        :param subject: The subject of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def customer_po_number(self):
        """Gets the customer_po_number of this NewInvoice.  # noqa: E501

        Plain UTF8 text. 100 characters max  # noqa: E501

        :return: The customer_po_number of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._customer_po_number

    @customer_po_number.setter
    def customer_po_number(self, customer_po_number):
        """Sets the customer_po_number of this NewInvoice.

        Plain UTF8 text. 100 characters max  # noqa: E501

        :param customer_po_number: The customer_po_number of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._customer_po_number = customer_po_number

    @property
    def date_issued(self):
        """Gets the date_issued of this NewInvoice.  # noqa: E501

        If not specified it will use today's date. The date should be specified as local date.  # noqa: E501

        :return: The date_issued of this NewInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewInvoice.

        If not specified it will use today's date. The date should be specified as local date.  # noqa: E501

        :param date_issued: The date_issued of this NewInvoice.  # noqa: E501
        :type: datetime
        """

        self._date_issued = date_issued

    @property
    def payment_terms(self):
        """Gets the payment_terms of this NewInvoice.  # noqa: E501

         \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:  (-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)  # noqa: E501

        :return: The payment_terms of this NewInvoice.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this NewInvoice.

         \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:  (-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)  # noqa: E501

        :param payment_terms: The payment_terms of this NewInvoice.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def due_date(self):
        """Gets the due_date of this NewInvoice.  # noqa: E501

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)  # noqa: E501

        :return: The due_date of this NewInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NewInvoice.

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)  # noqa: E501

        :param due_date: The due_date of this NewInvoice.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this NewInvoice.  # noqa: E501

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.  # noqa: E501

        :return: The transaction_tax_config_code of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this NewInvoice.

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.  # noqa: E501

        :param transaction_tax_config_code: The transaction_tax_config_code of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code

    @property
    def notes(self):
        """Gets the notes of this NewInvoice.  # noqa: E501

        Plain UTF8 text. (no HTML). Max 2000 characters  # noqa: E501

        :return: The notes of this NewInvoice.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewInvoice.

        Plain UTF8 text. (no HTML). Max 2000 characters  # noqa: E501

        :param notes: The notes of this NewInvoice.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def line_items(self):
        """Gets the line_items of this NewInvoice.  # noqa: E501


        :return: The line_items of this NewInvoice.  # noqa: E501
        :rtype: list[NewInvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this NewInvoice.


        :param line_items: The line_items of this NewInvoice.  # noqa: E501
        :type: list[NewInvoiceLineItem]
        """

        self._line_items = line_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewInvoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
