# coding: utf-8

"""
    Avaza API Documentation

    Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_idfk': 'int',
        'title': 'str',
        'start_date_utc': 'datetime',
        'end_date_utc': 'datetime'
    }

    attribute_map = {
        'project_idfk': 'ProjectIDFK',
        'title': 'Title',
        'start_date_utc': 'StartDateUTC',
        'end_date_utc': 'EndDateUTC'
    }

    def __init__(self, project_idfk=None, title=None, start_date_utc=None, end_date_utc=None):  # noqa: E501
        """NewSection - a model defined in Swagger"""  # noqa: E501

        self._project_idfk = None
        self._title = None
        self._start_date_utc = None
        self._end_date_utc = None
        self.discriminator = None

        if project_idfk is not None:
            self.project_idfk = project_idfk
        if title is not None:
            self.title = title
        if start_date_utc is not None:
            self.start_date_utc = start_date_utc
        if end_date_utc is not None:
            self.end_date_utc = end_date_utc

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewSection.  # noqa: E501


        :return: The project_idfk of this NewSection.  # noqa: E501
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewSection.


        :param project_idfk: The project_idfk of this NewSection.  # noqa: E501
        :type: int
        """

        self._project_idfk = project_idfk

    @property
    def title(self):
        """Gets the title of this NewSection.  # noqa: E501


        :return: The title of this NewSection.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewSection.


        :param title: The title of this NewSection.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def start_date_utc(self):
        """Gets the start_date_utc of this NewSection.  # noqa: E501


        :return: The start_date_utc of this NewSection.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_utc

    @start_date_utc.setter
    def start_date_utc(self, start_date_utc):
        """Sets the start_date_utc of this NewSection.


        :param start_date_utc: The start_date_utc of this NewSection.  # noqa: E501
        :type: datetime
        """

        self._start_date_utc = start_date_utc

    @property
    def end_date_utc(self):
        """Gets the end_date_utc of this NewSection.  # noqa: E501


        :return: The end_date_utc of this NewSection.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_utc

    @end_date_utc.setter
    def end_date_utc(self, end_date_utc):
        """Sets the end_date_utc of this NewSection.


        :param end_date_utc: The end_date_utc of this NewSection.  # noqa: E501
        :type: datetime
        """

        self._end_date_utc = end_date_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
